{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{CalendarIcon,CogIcon,ArrowPathIcon,ExclamationTriangleIcon,CheckCircleIcon,XCircleIcon}from'@heroicons/react/24/outline';import{useAuth}from'../contexts/AuthContext.tsx';import{useSocket}from'../contexts/SocketContext.tsx';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Schedule=()=>{const{user}=useAuth();const{onWorkOrderUpdate}=useSocket();// State management\nconst[workOrders,setWorkOrders]=useState([]);const[productionLines,setProductionLines]=useState([]);const[scheduleConfig,setScheduleConfig]=useState({hours_per_day:8,days_per_week:5,efficiency_factor:1.0});// UI State\nconst[selectedLine,setSelectedLine]=useState('all');const[selectedDate,setSelectedDate]=useState(new Date().toISOString().split('T')[0]);const[viewMode,setViewMode]=useState('timeline');const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[successMessage,setSuccessMessage]=useState(null);const[draggedWorkOrder,setDraggedWorkOrder]=useState(null);const[showConfigModal,setShowConfigModal]=useState(false);const[showLineConfigModal,setShowLineConfigModal]=useState(false);const[selectedLineForConfig,setSelectedLineForConfig]=useState(null);const[editingLineConfig,setEditingLineConfig]=useState(null);const[autoScheduleRunning,setAutoScheduleRunning]=useState(false);// API base URL - use production for local development since local database isn't set up\nconst baseUrl=process.env.NODE_ENV==='production'?window.location.origin:'https://smtdatabase01-production.up.railway.app';// Fetch work orders\nconst fetchWorkOrders=useCallback(async()=>{try{var _data$work_orders;const token=localStorage.getItem('auth_token');const response=await fetch(`${baseUrl}/api/schedule/timeline`,{headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}});if(!response.ok)throw new Error('Failed to fetch work orders');const data=await response.json();console.log('📥 API Response - Total work orders:',((_data$work_orders=data.work_orders)===null||_data$work_orders===void 0?void 0:_data$work_orders.length)||0);// Debug: Check scheduled work orders in API response\nconst scheduledInResponse=(data.work_orders||[]).filter(wo=>wo.scheduled_start_time);console.log('📅 Work orders with scheduled_start_time in API response:',scheduledInResponse.length);if(scheduledInResponse.length>0){console.log('📋 First few scheduled work orders from API:',scheduledInResponse.slice(0,3).map(wo=>({number:wo.work_order_number,start:wo.scheduled_start_time,end:wo.scheduled_end_time,line:wo.line_name})));}setWorkOrders(data.work_orders||[]);}catch(err){console.error('Error fetching work orders:',err);setError('Failed to load work orders');}},[baseUrl]);// Fetch production lines\nconst fetchProductionLines=useCallback(async()=>{try{const token=localStorage.getItem('auth_token');const response=await fetch(`${baseUrl}/api/production-lines`,{headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}});if(!response.ok)throw new Error('Failed to fetch production lines');const data=await response.json();setProductionLines(data.production_lines||[]);}catch(err){console.error('Error fetching production lines:',err);setError('Failed to load production lines');}},[baseUrl]);// Update work order schedule\nconst updateWorkOrderSchedule=useCallback(async(workOrderId,scheduleData)=>{try{const response=await fetch(`${baseUrl}/api/schedule/work-orders/${workOrderId}`,{method:'PUT',headers:{'Content-Type':'application/json','Authorization':`Bearer ${localStorage.getItem('auth_token')}`},body:JSON.stringify(scheduleData)});if(!response.ok)throw new Error('Failed to update schedule');return await response.json();}catch(err){console.error('Error updating schedule:',err);throw err;}},[baseUrl]);// Enhanced auto-schedule algorithm\nconst runAutoSchedule=useCallback(async()=>{if(!user||!['admin','scheduler'].includes(user.role)){setError('Insufficient permissions for auto-scheduling');return;}setAutoScheduleRunning(true);try{console.log('🚀 Starting auto-schedule...');console.log('👤 User role:',user.role);console.log('🌐 Base URL:',baseUrl);console.log('🔑 Auth token exists:',!!localStorage.getItem('auth_token'));// Get locked work orders (first 2 on each line) that should not be moved\nconst lockedWorkOrders=new Set();// Group scheduled work orders by line and find first 2 on each line\nconst workOrdersByLine=workOrders.filter(wo=>wo.scheduled_start_time&&wo.line_name).sort((a,b)=>new Date(a.scheduled_start_time).getTime()-new Date(b.scheduled_start_time).getTime()).reduce((acc,wo)=>{if(!acc[wo.line_name])acc[wo.line_name]=[];acc[wo.line_name].push(wo);return acc;},{});// Mark first 2 work orders on each line as locked\nObject.values(workOrdersByLine).forEach(lineWorkOrders=>{lineWorkOrders.slice(0,2).forEach(wo=>{lockedWorkOrders.add(wo.id);});});console.log(`🔒 Locked ${lockedWorkOrders.size} work orders (first 2 on each line)`);// Clear schedules for unlocked work orders (keep first 2 on each line)\nconst unlockedScheduledWorkOrders=workOrders.filter(wo=>wo.scheduled_start_time&&!lockedWorkOrders.has(wo.id));console.log(`🔄 Clearing ${unlockedScheduledWorkOrders.length} unlocked scheduled work orders for re-optimization`);// Clear schedules for unlocked work orders\nfor(const workOrder of unlockedScheduledWorkOrders){try{await updateWorkOrderSchedule(workOrder.id,{scheduled_start_time:null,scheduled_end_time:null,line_id:null});}catch(error){console.error(`Failed to clear schedule for ${workOrder.work_order_number}:`,error);}}// Get available work orders (not completed, cancelled, or locked)\nconst availableWorkOrders=workOrders.filter(wo=>wo.status!=='Completed'&&wo.status!=='Cancelled'&&(!wo.scheduled_start_time||!lockedWorkOrders.has(wo.id))// Include unlocked scheduled orders\n// Note: clear_to_build filtering removed for now since column doesn't exist in DB\n);// Debug logging\nconsole.log('Total work orders:',workOrders.length);console.log('Available work orders:',availableWorkOrders.length);console.log('Work order statuses:',[...new Set(workOrders.map(wo=>wo.status))]);console.log('Scheduled work orders:',workOrders.filter(wo=>wo.scheduled_start_time).length);console.log('Clear to build statuses:',[...new Set(workOrders.map(wo=>wo.clear_to_build))]);// Get available production lines (exclude Hand Placement and disabled lines)\nconst availableLines=productionLines.filter(line=>line.status!=='maintenance'&&line.status!=='down'&&!line.line_name.toLowerCase().includes('hand')&&line.auto_schedule_enabled!==false);// Debug logging for production lines\nconsole.log('Total production lines:',productionLines.length);console.log('Available production lines:',availableLines.length);console.log('Line statuses:',[...new Set(productionLines.map(line=>line.status))]);console.log('Line names:',productionLines.map(line=>line.line_name));if(availableWorkOrders.length===0){const totalWorkOrders=workOrders.length;const completedWorkOrders=workOrders.filter(wo=>wo.status==='Completed').length;const cancelledWorkOrders=workOrders.filter(wo=>wo.status==='Cancelled').length;const scheduledWorkOrders=workOrders.filter(wo=>wo.scheduled_start_time).length;setError(`No work orders available for scheduling. Total: ${totalWorkOrders}, Completed: ${completedWorkOrders}, Cancelled: ${cancelledWorkOrders}, Already Scheduled: ${scheduledWorkOrders}`);return;}if(availableLines.length===0){const totalLines=productionLines.length;const maintenanceLines=productionLines.filter(line=>line.status==='maintenance').length;const downLines=productionLines.filter(line=>line.status==='down').length;const handPlacementLines=productionLines.filter(line=>line.line_name.toLowerCase().includes('hand')).length;const disabledLines=productionLines.filter(line=>line.auto_schedule_enabled===false).length;setError(`No production lines available for scheduling. Total: ${totalLines}, Maintenance: ${maintenanceLines}, Down: ${downLines}, Hand Placement: ${handPlacementLines}, Auto-schedule Disabled: ${disabledLines}`);return;}// Enhanced priority scoring system focused on due date adherence\nconst calculateWorkOrderPriority=wo=>{let priority=0;// Ship date priority - primary factor (finish as close to due date as possible)\nif(wo.ship_date){const daysUntilShip=Math.ceil((new Date(wo.ship_date).getTime()-new Date().getTime())/(1000*60*60*24));if(daysUntilShip<=0){// Past due - HIGHEST priority\npriority+=1000+Math.abs(daysUntilShip);}else if(daysUntilShip<=21){// Due within 3 weeks - high priority, closer to due date = higher priority\npriority+=500+(21-daysUntilShip)*20;}else{// Due further out - lower priority\npriority+=Math.max(0,100-daysUntilShip);}}else{// No ship date - medium priority\npriority+=200;}// Kit date priority (secondary factor)\nif(wo.kit_date){const daysUntilKit=Math.ceil((new Date(wo.kit_date).getTime()-new Date().getTime())/(1000*60*60*24));if(daysUntilKit<=7){priority+=Math.max(0,7-daysUntilKit)*5;}}// Status priority (ready work orders should be scheduled)\nconst statusPriority={'Ready':50,'Ready*':50,'1st Side Ready':45,'In Progress':40,'Pending':20,'On Hold':5};priority+=statusPriority[wo.status]||0;return priority;};// Sort work orders by enhanced priority\nconst prioritizedWorkOrders=[...availableWorkOrders].sort((a,b)=>{const priorityA=calculateWorkOrderPriority(a);const priorityB=calculateWorkOrderPriority(b);return priorityB-priorityA;// Higher priority first\n});// Line scoring system\nconst calculateLineScore=(line,workOrder)=>{let score=0;// Calculate work order duration\nconst setupHours=workOrder.setup_hours_estimated||0;const productionHours=workOrder.production_time_hours_estimated||0;const productionDays=workOrder.production_time_days_estimated||0;const totalDurationHours=setupHours+productionHours+productionDays*8;// Daily capacity preference (prefer lines with higher daily capacity)\nconst dailyCapacity=(line.shifts_per_day||1)*(line.hours_per_shift||8);score+=dailyCapacity*2;// Directly reward higher daily capacity\n// Available capacity bonus (remaining capacity for more work)\nscore+=(line.available_capacity||0)*3;// Efficiency score (prefer more efficient lines)\nscore+=(line.efficiency_target||85)/10;// Time multiplier preference (prefer lines with lower multipliers for faster processing)\nscore+=1/(line.time_multiplier||1.0)*10;// Line type preference (prefer SMT over other types)\nif(line.line_type==='SMT'){score+=15;}// Current utilization (prefer less busy lines)\nscore+=(1-(line.current_utilization||0)/100)*10;return score;};// Track scheduled work orders for conflict detection\nconst scheduledWorkOrders=workOrders.filter(wo=>wo.scheduled_start_time);// Log current line utilization for load balancing visibility\nconsole.log('📊 Current line utilization:');productionLines.forEach(line=>{const lineSchedules=scheduledWorkOrders.filter(wo=>wo.line_id===line.id&&wo.scheduled_end_time);const latestEnd=lineSchedules.length>0?new Date(Math.max(...lineSchedules.map(wo=>new Date(wo.scheduled_end_time).getTime()))):new Date();const daysOut=Math.ceil((latestEnd.getTime()-new Date().getTime())/(1000*60*60*24));console.log(`  ${line.line_name}: scheduled to ${latestEnd.toLocaleDateString()} (${daysOut} days out)`);});// Schedule work orders\nfor(const workOrder of prioritizedWorkOrders){// Calculate work order duration\nconst setupHours=workOrder.setup_hours_estimated||0;const productionHours=workOrder.production_time_hours_estimated||0;const productionDays=workOrder.production_time_days_estimated||0;const totalDurationHours=setupHours+productionHours+productionDays*8;// Find best line for this work order\nlet bestLine=null;let bestScore=-1;let bestStartTime=null;for(const line of availableLines){console.log(`🔍 Checking line ${line.line_name}:`);// Calculate daily capacity for this line\nconst dailyCapacity=(line.shifts_per_day||1)*(line.hours_per_shift||8);console.log(`  Daily capacity: ${dailyCapacity} hours/day`);console.log(`  Required duration: ${totalDurationHours} hours total`);// Calculate how many days this work order will need\nconst daysRequired=Math.ceil(totalDurationHours/dailyCapacity);console.log(`  Days required: ${daysRequired} days`);// Special logging for long work orders\nif(totalDurationHours>50){console.log(`🚨 LONG WORK ORDER: ${workOrder.work_order_number} needs ${totalDurationHours}h (${daysRequired} days)`);console.log(`  Line: ${line.line_name} (${dailyCapacity}h/day)`);console.log(`  Due date: ${workOrder.ship_date}`);}// Check if work order can fit within daily capacity (even if it spans multiple days)\nif(dailyCapacity===0){console.log(`  ❌ No daily capacity configured`);continue;}// Calculate line score\nconst lineScore=calculateLineScore(line,workOrder);console.log(`  📊 Line score: ${lineScore}`);console.log(`  📋 Line details: capacity=${line.available_capacity}, shifts=${line.shifts_per_day}, hours=${line.hours_per_shift}, multiplier=${line.time_multiplier}`);// Find best available multi-day slot on this line (considering due dates)\nconst availableSlot=findBestMultiDaySlot(line,workOrder,scheduledWorkOrders,selectedDate,daysRequired);console.log(`  ⏰ Available slot: ${availableSlot?availableSlot.toISOString():'None'}`);if(availableSlot){// Calculate completion time score (earlier start = higher score)\nconst now=new Date();const daysFromNow=Math.ceil((availableSlot.getTime()-now.getTime())/(1000*60*60*24));const timeScore=Math.max(0,100-daysFromNow);// 100 points for immediate start, decreases by 1 per day\n// Calculate load balancing score - reward less busy lines for maximum throughput\nconst workOrderEndTime=new Date(availableSlot);workOrderEndTime.setTime(workOrderEndTime.getTime()+totalDurationHours*(line.time_multiplier||1.0)*60*60*1000);// Find the latest end time across all lines to normalize load balancing\nconst allLineEndTimes=productionLines.map(pl=>{const lineSchedules=scheduledWorkOrders.filter(wo=>wo.line_id===pl.id&&wo.scheduled_end_time);if(lineSchedules.length===0)return now.getTime();return Math.max(...lineSchedules.map(wo=>new Date(wo.scheduled_end_time).getTime()));});const maxLineEndTime=Math.max(...allLineEndTimes);// Load balance score: reward lines that will finish earlier (less backed up)\nconst lineCurrentEndTime=scheduledWorkOrders.filter(wo=>wo.line_id===line.id&&wo.scheduled_end_time).reduce((latest,wo)=>Math.max(latest,new Date(wo.scheduled_end_time).getTime()),now.getTime());const loadBalanceScore=Math.max(0,(maxLineEndTime-lineCurrentEndTime)/(1000*60*60*24)*15);// 15 points per day difference\n// Combined score: line quality + timing + load balancing\nconst totalScore=lineScore+timeScore+loadBalanceScore;console.log(`  ⏰ Days from now: ${daysFromNow}, Time score: ${timeScore}, Load balance: ${loadBalanceScore.toFixed(1)}, Total score: ${totalScore.toFixed(1)}`);if(totalScore>bestScore){console.log(`  ✅ New best line! (was ${bestScore}, now ${totalScore.toFixed(1)})`);bestLine=line;bestScore=totalScore;bestStartTime=availableSlot;}}}if(bestLine&&bestStartTime){// Calculate end time for multi-day scheduling\nconst adjustedDuration=totalDurationHours*(bestLine.time_multiplier||1.0);const dailyCapacity=(bestLine.shifts_per_day||1)*(bestLine.hours_per_shift||8);const daysRequired=Math.ceil(adjustedDuration/dailyCapacity);// Calculate actual end time considering daily work hours\nconst endTime=new Date(bestStartTime);const workingHoursPerDay=bestLine.hours_per_shift||8;if(daysRequired===1){// Single day: just add the duration\nendTime.setHours(endTime.getHours()+adjustedDuration);}else{// Multi-day: calculate based on working days and daily capacity\nlet remainingHours=adjustedDuration;let currentDay=new Date(bestStartTime);while(remainingHours>0){const hoursThisDay=Math.min(remainingHours,workingHoursPerDay);remainingHours-=hoursThisDay;if(remainingHours>0){// Move to next working day\ncurrentDay.setDate(currentDay.getDate()+1);// Skip weekends if line doesn't work weekends\nwhile((bestLine.days_per_week||5)===5&&(currentDay.getDay()===0||currentDay.getDay()===6)){currentDay.setDate(currentDay.getDate()+1);}}else{// Last day - calculate exact end time\nconst[startHour]=(bestLine.start_time||'08:00').split(':').map(Number);currentDay.setHours(startHour+hoursThisDay);}}endTime.setTime(currentDay.getTime());}console.log(`📅 Scheduling work order ${workOrder.work_order_number} on ${bestLine.line_name}`);console.log(`⏰ Start: ${bestStartTime.toISOString()}, End: ${endTime.toISOString()}`);console.log(`🆔 Work Order ID being sent to API: \"${workOrder.id}\" (type: ${typeof workOrder.id})`);// Update work order with schedule\ntry{await updateWorkOrderSchedule(workOrder.id,{line_id:bestLine.id,scheduled_start_time:bestStartTime.toISOString(),scheduled_end_time:endTime.toISOString(),line_position:1});console.log(`✅ Successfully scheduled work order ${workOrder.work_order_number}`);}catch(scheduleError){console.error(`❌ Failed to schedule work order ${workOrder.work_order_number}:`,scheduleError);throw new Error(`Failed to schedule work order ${workOrder.work_order_number}: ${scheduleError.message}`);}// Add to scheduled work orders for conflict detection\nscheduledWorkOrders.push({...workOrder,line_id:bestLine.id,scheduled_start_time:bestStartTime.toISOString(),scheduled_end_time:endTime.toISOString()});}}// Refresh data\nconsole.log('🔄 Refreshing work orders after auto-scheduling...');await fetchWorkOrders();// Debug: Check if work orders have scheduled times after refresh (use a ref to avoid stale closure)\nsetTimeout(()=>{const currentWorkOrders=workOrders;// This might be stale, let's remove this debug for now\nconsole.log('🔄 Data refresh completed after auto-scheduling');},100);setSuccessMessage('Auto-schedule completed successfully');setTimeout(()=>setSuccessMessage(null),3000);setError(null);}catch(err){console.error('Auto-schedule error:',err);setError('Auto-scheduling failed: '+(err instanceof Error?err.message:'Unknown error'));}finally{setAutoScheduleRunning(false);}},[productionLines,selectedDate,user,updateWorkOrderSchedule,fetchWorkOrders]);// Helper function to find best available multi-day time slot considering due dates\nconst findBestMultiDaySlot=(line,workOrder,scheduledWorkOrders,targetDate,daysRequired)=>{const earliestSlot=findEarliestMultiDaySlot(line,workOrder,scheduledWorkOrders,targetDate,daysRequired);if(!earliestSlot||!workOrder.ship_date){return earliestSlot;}// Calculate work order duration for end date calculation\nconst setupHours=workOrder.setup_hours_estimated||0;const productionHours=workOrder.production_time_hours_estimated||0;const productionDays=workOrder.production_time_days_estimated||0;const totalDurationHours=setupHours+productionHours+productionDays*8;const adjustedDuration=totalDurationHours*(line.time_multiplier||1.0);const dailyCapacity=(line.shifts_per_day||1)*(line.hours_per_shift||8);const shipDate=new Date(workOrder.ship_date);const earliestDaysFromStart=Math.ceil(adjustedDuration/dailyCapacity);// Calculate earliest finish date\nconst earliestEndDate=new Date(earliestSlot);let remainingDays=earliestDaysFromStart;while(remainingDays>0){earliestEndDate.setDate(earliestEndDate.getDate()+1);// Skip weekends if line doesn't work weekends\nconst dayOfWeek=earliestEndDate.getDay();if((line.days_per_week||5)===5&&(dayOfWeek===0||dayOfWeek===6)){continue;}remainingDays--;}// If earliest finish is more than 3 weeks before due date, try to find a later slot\nconst threeWeeksBeforeDue=new Date(shipDate);threeWeeksBeforeDue.setDate(threeWeeksBeforeDue.getDate()-21);if(earliestEndDate<threeWeeksBeforeDue){// Try to find a slot that finishes closer to the due date\nconst targetStartDate=new Date(threeWeeksBeforeDue);targetStartDate.setDate(targetStartDate.getDate()-earliestDaysFromStart);const laterSlot=findEarliestMultiDaySlot(line,workOrder,scheduledWorkOrders,targetStartDate.toISOString().split('T')[0],daysRequired);if(laterSlot){return laterSlot;}}return earliestSlot;};// Helper function to find earliest available multi-day time slot\nconst findEarliestMultiDaySlot=(line,workOrder,scheduledWorkOrders,targetDate,daysRequired)=>{// Parse line work hours\nconst startTimeStr=line.start_time||'08:00';const endTimeStr=line.end_time||'17:00';const[startHour,startMinute]=startTimeStr.split(':').map(Number);const[endHour,endMinute]=endTimeStr.split(':').map(Number);// Calculate daily capacity and work order duration\nconst dailyCapacity=(line.shifts_per_day||1)*(line.hours_per_shift||8);const setupHours=workOrder.setup_hours_estimated||0;const productionHours=workOrder.production_time_hours_estimated||0;const productionDays=workOrder.production_time_days_estimated||0;const totalDurationHours=setupHours+productionHours+productionDays*8;// Start checking from the target date\nlet checkDate=new Date(targetDate);// Extended look-ahead for very long work orders that need more time\nconst adjustedDuration=(workOrder.setup_hours_estimated||0)+(workOrder.production_time_hours_estimated||0)+(workOrder.production_time_days_estimated||0)*8;const lineDailyCapacity=(line.shifts_per_day||1)*(line.hours_per_shift||8);const estimatedDays=Math.ceil(adjustedDuration/Math.max(lineDailyCapacity,1));// Use longer look-ahead for work orders that need more than 30 days\nconst maxLookAhead=estimatedDays>30?Math.min(90,estimatedDays+30):45;for(let dayOffset=0;dayOffset<maxLookAhead;dayOffset++){const currentCheckDate=new Date(checkDate);currentCheckDate.setDate(checkDate.getDate()+dayOffset);// Skip weekends if line doesn't work weekends\nconst dayOfWeek=currentCheckDate.getDay();if((line.days_per_week||5)===5&&(dayOfWeek===0||dayOfWeek===6)){continue;}// Check if we have consecutive available days starting from this date\nlet consecutiveDaysAvailable=true;for(let dayIndex=0;dayIndex<daysRequired;dayIndex++){const checkingDate=new Date(currentCheckDate);checkingDate.setDate(currentCheckDate.getDate()+dayIndex);// Skip weekends for additional days too\nconst checkingDayOfWeek=checkingDate.getDay();if((line.days_per_week||5)===5&&(checkingDayOfWeek===0||checkingDayOfWeek===6)){consecutiveDaysAvailable=false;break;}// Get existing schedules for this line that overlap with this specific date\nconst daySchedules=scheduledWorkOrders.filter(wo=>{if(wo.line_id!==line.id||!wo.scheduled_start_time||!wo.scheduled_end_time){return false;}const woStart=new Date(wo.scheduled_start_time);const woEnd=new Date(wo.scheduled_end_time);// Check if the work order overlaps with the checking date\nconst dayStart=new Date(checkingDate);dayStart.setHours(0,0,0,0);const dayEnd=new Date(checkingDate);dayEnd.setHours(23,59,59,999);// Work order overlaps if it starts before day ends AND ends after day starts\nreturn woStart<=dayEnd&&woEnd>=dayStart;});// Calculate how much capacity is used this day (only count the portion that overlaps with this day)\nconst usedCapacity=daySchedules.reduce((total,wo)=>{const woStart=new Date(wo.scheduled_start_time);const woEnd=new Date(wo.scheduled_end_time);// Calculate the overlap between work order and this day\nconst dayStart=new Date(checkingDate);dayStart.setHours(startHour,startMinute,0,0);const dayEnd=new Date(checkingDate);dayEnd.setHours(endHour,endMinute,0,0);// Find the actual overlap period\nconst overlapStart=new Date(Math.max(woStart.getTime(),dayStart.getTime()));const overlapEnd=new Date(Math.min(woEnd.getTime(),dayEnd.getTime()));// Calculate duration of overlap in hours\nconst overlapDuration=Math.max(0,(overlapEnd.getTime()-overlapStart.getTime())/(1000*60*60));return total+overlapDuration;},0);// Check if we have enough remaining capacity for this day's portion\nconst dailyHoursNeeded=Math.min(totalDurationHours-dayIndex*dailyCapacity,dailyCapacity);if(usedCapacity+dailyHoursNeeded>dailyCapacity){consecutiveDaysAvailable=false;break;}}if(consecutiveDaysAvailable){// Found a valid starting date - return the start time\nconst startTime=new Date(currentCheckDate);startTime.setHours(startHour,startMinute,0,0);return startTime;}}return null;};// Helper function to find earliest available time slot\nconst findEarliestAvailableSlot=(line,workOrder,scheduledWorkOrders,targetDate)=>{// Parse line work hours\nconst startTimeStr=line.start_time||'08:00';const endTimeStr=line.end_time||'17:00';const[startHour,startMinute]=startTimeStr.split(':').map(Number);const[endHour,endMinute]=endTimeStr.split(':').map(Number);// Calculate work order duration\nconst setupHours=workOrder.setup_hours_estimated||0;const productionHours=workOrder.production_time_hours_estimated||0;const productionDays=workOrder.production_time_days_estimated||0;const totalDurationHours=setupHours+productionHours+productionDays*8;const adjustedDuration=totalDurationHours*(line.time_multiplier||1.0);// Get existing schedules for this line on the target date\nconst lineSchedules=scheduledWorkOrders.filter(wo=>wo.line_id===line.id&&wo.scheduled_start_time&&wo.scheduled_end_time&&new Date(wo.scheduled_start_time).toDateString()===new Date(targetDate).toDateString()).sort((a,b)=>new Date(a.scheduled_start_time).getTime()-new Date(b.scheduled_start_time).getTime());// Start with line opening time\nlet currentTime=new Date(targetDate);currentTime.setHours(startHour,startMinute,0,0);// Check each potential time slot\nwhile(currentTime.getHours()<endHour){const slotEndTime=new Date(currentTime);slotEndTime.setHours(slotEndTime.getHours()+adjustedDuration);// Check if slot extends beyond line closing time\nif(slotEndTime.getHours()>endHour){// Move to next day\ncurrentTime.setDate(currentTime.getDate()+1);currentTime.setHours(startHour,startMinute,0,0);continue;}// Check for conflicts with existing schedules\nconst hasConflict=lineSchedules.some(schedule=>{const scheduleStart=new Date(schedule.scheduled_start_time);const scheduleEnd=new Date(schedule.scheduled_end_time);return currentTime>=scheduleStart&&currentTime<scheduleEnd||slotEndTime>scheduleStart&&slotEndTime<=scheduleEnd||currentTime<=scheduleStart&&slotEndTime>=scheduleEnd;});if(!hasConflict){return currentTime;}// Move to next potential slot (after the conflicting schedule)\nconst nextConflict=lineSchedules.find(schedule=>{const scheduleStart=new Date(schedule.scheduled_start_time);return scheduleStart>=currentTime;});if(nextConflict){currentTime=new Date(nextConflict.scheduled_end_time);}else{// No more conflicts, but check if we still have time today\nif(currentTime.getHours()+adjustedDuration<=endHour){return currentTime;}else{// Move to next day\ncurrentTime.setDate(currentTime.getDate()+1);currentTime.setHours(startHour,startMinute,0,0);}}}return null;};// Line configuration functions\nconst openLineConfig=line=>{setSelectedLineForConfig(line);setEditingLineConfig({hours_per_shift:line.hours_per_shift||8,shifts_per_day:line.shifts_per_day||1,days_per_week:line.days_per_week||5,time_multiplier:line.time_multiplier||1.0,start_time:line.start_time||'08:00',end_time:line.end_time||'17:00',lunch_break_duration:line.lunch_break_duration||60,lunch_break_start:line.lunch_break_start||'12:00',break_duration:line.break_duration||15,auto_schedule_enabled:true,maintenance_interval_days:30,efficiency_target:85});setShowLineConfigModal(true);};const updateLineConfig=async(lineId,config)=>{try{const token=localStorage.getItem('auth_token');console.log('Updating line config for:',lineId,'with config:',config);const response=await fetch(`${baseUrl}/api/production-lines/${lineId}/config`,{method:'PUT',headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'},body:JSON.stringify(config)});console.log('Response status:',response.status);if(!response.ok){const errorData=await response.text();console.error('Response error:',errorData);throw new Error(`Failed to update line configuration: ${response.status} ${errorData}`);}const result=await response.json();console.log('Update successful:',result);// Refresh production lines data\nawait fetchProductionLines();setShowLineConfigModal(false);setSelectedLineForConfig(null);setEditingLineConfig(null);setError(null);// Clear any previous errors\nsetSuccessMessage(`Line configuration updated successfully for ${selectedLineForConfig===null||selectedLineForConfig===void 0?void 0:selectedLineForConfig.line_name}`);// Clear success message after 3 seconds\nsetTimeout(()=>setSuccessMessage(null),3000);}catch(err){console.error('Error updating line config:',err);setError(err instanceof Error?err.message:'Failed to update line configuration');}};// Drag and drop handlers\nconst handleDragStart=workOrder=>{setDraggedWorkOrder(workOrder);};const handleDragOver=e=>{e.preventDefault();};const handleDrop=async(e,targetLineId,targetTime)=>{e.preventDefault();if(!draggedWorkOrder)return;try{const targetDateTime=new Date(`${selectedDate}T${targetTime}`);const endDateTime=new Date(targetDateTime);// Calculate total duration from available time fields\nconst setupHours=draggedWorkOrder.setup_hours_estimated||0;const productionHours=draggedWorkOrder.production_time_hours_estimated||0;const productionDays=draggedWorkOrder.production_time_days_estimated||0;const totalDurationHours=setupHours+productionHours+productionDays*8;endDateTime.setHours(endDateTime.getHours()+totalDurationHours);await updateWorkOrderSchedule(draggedWorkOrder.id,{line_id:targetLineId,scheduled_start_time:targetDateTime.toISOString(),scheduled_end_time:endDateTime.toISOString()});// Refresh data\nawait fetchWorkOrders();setDraggedWorkOrder(null);}catch(err){console.error('Drop error:',err);setError('Failed to schedule work order');}};// Load data on mount\nuseEffect(()=>{const loadData=async()=>{setLoading(true);await Promise.all([fetchWorkOrders(),fetchProductionLines()]);setLoading(false);};loadData();},[fetchWorkOrders,fetchProductionLines]);// Real-time updates - using the context's event system\nuseEffect(()=>{const unsubscribe=onWorkOrderUpdate(()=>{fetchWorkOrders();});return unsubscribe;},[onWorkOrderUpdate,fetchWorkOrders]);// Filter work orders by selected line\nconst filteredWorkOrders=selectedLine==='all'?workOrders:workOrders.filter(wo=>wo.line_name===selectedLine);// Generate timeline slots\nconst generateTimelineSlots=()=>{const slots=[];filteredWorkOrders.forEach((workOrder,index)=>{if(workOrder.scheduled_start_time){const startTime=new Date(workOrder.scheduled_start_time);const endTime=workOrder.scheduled_end_time?new Date(workOrder.scheduled_end_time):startTime;const duration=(endTime.getTime()-startTime.getTime())/(1000*60*60);// hours\nslots.push({workOrder,startTime:startTime.toTimeString().slice(0,5),endTime:endTime.toTimeString().slice(0,5),duration,position:index});}});return slots;};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-sy-black-50 flex items-center justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(ArrowPathIcon,{className:\"h-8 w-8 text-sy-green-600 mx-auto mb-4 animate-spin\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sy-black-600\",children:\"Loading schedule...\"})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-2xl font-bold text-sy-black-900\",children:\"Production Schedule\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-1 text-sm text-sy-black-600\",children:\"Manage and optimize production scheduling\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-3\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setShowConfigModal(true),className:\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-sy-black-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sy-green-500\",children:[/*#__PURE__*/_jsx(CogIcon,{className:\"h-4 w-4 mr-2\"}),\"Config\"]}),user&&['admin','scheduler'].includes(user.role)&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-3\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:runAutoSchedule,disabled:autoScheduleRunning,className:\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-sy-green-600 hover:bg-sy-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sy-green-500 disabled:opacity-50\",children:[autoScheduleRunning?/*#__PURE__*/_jsx(ArrowPathIcon,{className:\"h-4 w-4 mr-2 animate-spin\"}):/*#__PURE__*/_jsx(CalendarIcon,{className:\"h-4 w-4 mr-2\"}),autoScheduleRunning?'Scheduling...':'Auto Schedule']}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs text-sy-black-500\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 mr-1\",children:\"Manual Only\"}),\"Hand Placement excluded\"]})]})]})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"bg-red-50 border border-red-200 rounded-md p-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex\",children:[/*#__PURE__*/_jsx(ExclamationTriangleIcon,{className:\"h-5 w-5 text-red-400\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"ml-3\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-sm font-medium text-red-800\",children:\"Error\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-1 text-sm text-red-700\",children:error})]})]})}),successMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"bg-green-50 border border-green-200 rounded-md p-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex\",children:[/*#__PURE__*/_jsx(CheckCircleIcon,{className:\"h-5 w-5 text-green-400\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"ml-3\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-sm font-medium text-green-800\",children:\"Success\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-1 text-sm text-green-700\",children:successMessage})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-white shadow rounded-lg p-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-4 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Date\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:selectedDate,onChange:e=>setSelectedDate(e.target.value),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Production Line\"}),/*#__PURE__*/_jsxs(\"select\",{value:selectedLine,onChange:e=>setSelectedLine(e.target.value),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"All Lines\"}),productionLines.map(line=>/*#__PURE__*/_jsxs(\"option\",{value:line.line_name,children:[line.line_name,line.line_name.toLowerCase().includes('hand')?' (Manual Only)':'']},line.id))]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"View Mode\"}),/*#__PURE__*/_jsxs(\"select\",{value:viewMode,onChange:e=>setViewMode(e.target.value),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"timeline\",children:\"Timeline\"}),/*#__PURE__*/_jsx(\"option\",{value:\"calendar\",children:\"Calendar\"}),/*#__PURE__*/_jsx(\"option\",{value:\"list\",children:\"List\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-sy-black-600\",children:[filteredWorkOrders.length,\" work orders\",/*#__PURE__*/_jsx(\"br\",{}),filteredWorkOrders.filter(wo=>wo.scheduled_start_time).length,\" scheduled\"]})]})]})}),viewMode==='timeline'&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white shadow rounded-lg overflow-hidden\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"px-6 py-4 border-b border-gray-200\",children:/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-medium text-sy-black-900\",children:\"Timeline View\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"overflow-x-auto\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"min-w-full\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"grid bg-gray-50 border-b border-gray-200\",style:{gridTemplateColumns:'200px repeat(12, 1fr)'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"p-3 text-sm font-medium text-sy-black-700\",children:\"Line\"}),Array.from({length:12},(_,i)=>/*#__PURE__*/_jsxs(\"div\",{className:\"p-3 text-sm font-medium text-sy-black-700 text-center border-l border-gray-200\",children:[8+i,\":00\"]},i))]}),productionLines.map(line=>/*#__PURE__*/_jsxs(\"div\",{className:\"grid border-b border-gray-200\",style:{gridTemplateColumns:'200px repeat(12, 1fr)'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"p-3 text-sm font-medium text-sy-black-900 bg-gray-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-2\",children:[/*#__PURE__*/_jsx(\"span\",{children:line.line_name}),line.line_name.toLowerCase().includes('hand')&&/*#__PURE__*/_jsx(\"span\",{className:\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800\",children:\"Manual Only\"})]}),user&&['admin','scheduler'].includes(user.role)&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>openLineConfig(line),className:\"inline-flex items-center px-2 py-1 border border-gray-300 text-xs font-medium rounded text-sy-black-700 bg-white hover:bg-gray-50\",title:\"Configure line settings\",children:/*#__PURE__*/_jsx(CogIcon,{className:\"h-3 w-3\"})})]})}),Array.from({length:12},(_,i)=>{const timeSlot=`${8+i}:00`;const scheduledWorkOrder=generateTimelineSlots().find(slot=>slot.workOrder.line_name===line.line_name&&slot.startTime===timeSlot);return/*#__PURE__*/_jsx(\"div\",{className:\"p-2 border-l border-gray-200 min-h-[60px] relative\",onDragOver:handleDragOver,onDrop:e=>handleDrop(e,line.id,timeSlot),children:scheduledWorkOrder?/*#__PURE__*/_jsxs(\"div\",{className:\"bg-sy-green-100 border border-sy-green-300 rounded p-2 text-xs\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-sy-green-800\",children:scheduledWorkOrder.workOrder.work_order_number}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sy-green-600\",children:[scheduledWorkOrder.duration,\"h\"]})]}):/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-400 text-xs\",children:\"Available\"})},i);})]},line.id))]})})]}),viewMode==='calendar'&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white shadow rounded-lg\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"px-6 py-4 border-b border-gray-200\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-medium text-sy-black-900\",children:\"Calendar View\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"mt-1 text-sm text-sy-black-600\",children:[\"Scheduled work orders by date (\",filteredWorkOrders.filter(wo=>wo.scheduled_start_time).length,\" scheduled)\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"p-6\",children:(()=>{// Group scheduled work orders by date\nconst workOrdersByDate=filteredWorkOrders.filter(wo=>wo.scheduled_start_time).reduce((acc,wo)=>{const startDate=new Date(wo.scheduled_start_time).toISOString().split('T')[0];if(!acc[startDate])acc[startDate]=[];acc[startDate].push(wo);return acc;},{});// Sort dates\nconst sortedDates=Object.keys(workOrdersByDate).sort();if(sortedDates.length===0){return/*#__PURE__*/_jsxs(\"div\",{className:\"text-center py-12\",children:[/*#__PURE__*/_jsx(CalendarIcon,{className:\"mx-auto h-12 w-12 text-gray-400\"}),/*#__PURE__*/_jsx(\"h3\",{className:\"mt-2 text-sm font-medium text-sy-black-900\",children:\"No scheduled work orders\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-1 text-sm text-sy-black-500\",children:\"Run auto-scheduling to see work orders on the calendar.\"})]});}return/*#__PURE__*/_jsx(\"div\",{className:\"space-y-6\",children:sortedDates.map(date=>{const orders=workOrdersByDate[date];const dateObj=new Date(date+'T00:00:00');const dayName=dateObj.toLocaleDateString('en-US',{weekday:'long'});const monthDay=dateObj.toLocaleDateString('en-US',{month:'short',day:'numeric'});return/*#__PURE__*/_jsxs(\"div\",{className:\"border border-gray-200 rounded-lg\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-50 px-4 py-3 border-b border-gray-200\",children:/*#__PURE__*/_jsxs(\"h4\",{className:\"text-lg font-medium text-sy-black-900\",children:[dayName,\", \",monthDay,/*#__PURE__*/_jsxs(\"span\",{className:\"ml-2 text-sm font-normal text-sy-black-500\",children:[\"(\",orders.length,\" work order\",orders.length!==1?'s':'',\")\"]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"p-4 space-y-3\",children:orders.map(wo=>{const startTime=new Date(wo.scheduled_start_time);const endTime=wo.scheduled_end_time?new Date(wo.scheduled_end_time):null;const duration=(wo.setup_hours_estimated||0)+(wo.production_time_hours_estimated||0)+(wo.production_time_days_estimated||0)*8;return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between p-3 bg-sy-black-50 rounded border border-gray-200\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-sy-black-900\",children:wo.work_order_number}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-sy-black-600\",children:wo.customer_name}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-sy-black-500\",children:[wo.assembly_number,\" (Qty: \",wo.quantity,\")\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-1 text-xs text-sy-black-500\",children:[startTime.toLocaleTimeString('en-US',{hour:'2-digit',minute:'2-digit'}),endTime&&` - ${endTime.toLocaleTimeString('en-US',{hour:'2-digit',minute:'2-digit'})}`,\"\\u2022 \",duration.toFixed(1),\"h duration \\u2022 \",wo.line_name]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-right\",children:[/*#__PURE__*/_jsx(\"div\",{className:`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${wo.status==='Ready'||wo.status==='Ready*'?'bg-green-100 text-green-800':wo.status==='1st Side Ready'?'bg-blue-100 text-blue-800':'bg-gray-100 text-gray-800'}`,children:wo.status}),wo.ship_date&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-1 text-xs text-sy-black-500\",children:[\"Ship: \",new Date(wo.ship_date).toLocaleDateString()]})]})]},wo.id);})})]},date);})});})()})]}),viewMode==='list'&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white shadow rounded-lg\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"px-6 py-4 border-b border-gray-200\",children:/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-medium text-sy-black-900\",children:\"Work Orders\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"overflow-x-auto\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"min-w-full divide-y divide-gray-200\",children:[/*#__PURE__*/_jsx(\"thead\",{className:\"bg-gray-50\",children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{className:\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\",children:\"Work Order\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\",children:\"Customer\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\",children:\"Assembly\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\",children:\"Status\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\",children:\"Clear to Build\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\",children:\"Ship Date\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\",children:\"Duration\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\",children:\"Scheduled\"}),/*#__PURE__*/_jsx(\"th\",{className:\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\",children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{className:\"bg-white divide-y divide-gray-200\",children:filteredWorkOrders.map(workOrder=>/*#__PURE__*/_jsxs(\"tr\",{draggable:workOrder.clear_to_build,onDragStart:()=>workOrder.clear_to_build&&handleDragStart(workOrder),className:`hover:bg-gray-50 ${workOrder.clear_to_build?'cursor-move':'cursor-not-allowed opacity-60'}`,children:[/*#__PURE__*/_jsx(\"td\",{className:\"px-6 py-4 whitespace-nowrap text-sm font-medium text-sy-black-900\",children:workOrder.work_order_number}),/*#__PURE__*/_jsx(\"td\",{className:\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\",children:workOrder.customer_name}),/*#__PURE__*/_jsx(\"td\",{className:\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\",children:workOrder.assembly_number}),/*#__PURE__*/_jsx(\"td\",{className:\"px-6 py-4 whitespace-nowrap\",children:/*#__PURE__*/_jsx(\"span\",{className:`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${workOrder.status==='Completed'?'bg-green-100 text-green-800':workOrder.status==='Cancelled'?'bg-red-100 text-red-800':'bg-yellow-100 text-yellow-800'}`,children:workOrder.status})}),/*#__PURE__*/_jsx(\"td\",{className:\"px-6 py-4 whitespace-nowrap\",children:/*#__PURE__*/_jsx(\"span\",{className:`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${workOrder.clear_to_build?'bg-green-100 text-green-800':'bg-red-100 text-red-800'}`,children:workOrder.clear_to_build?'Yes':'No'})}),/*#__PURE__*/_jsx(\"td\",{className:\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\",children:workOrder.ship_date?new Date(workOrder.ship_date).toLocaleDateString():'N/A'}),/*#__PURE__*/_jsxs(\"td\",{className:\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\",children:[workOrder.production_time_hours_estimated||0,\"h\"]}),/*#__PURE__*/_jsx(\"td\",{className:\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\",children:workOrder.scheduled_start_time?/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center\",children:[/*#__PURE__*/_jsx(CheckCircleIcon,{className:\"h-4 w-4 text-green-500 mr-1\"}),new Date(workOrder.scheduled_start_time).toLocaleDateString()]}):/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center\",children:[/*#__PURE__*/_jsx(XCircleIcon,{className:\"h-4 w-4 text-red-500 mr-1\"}),\"Not scheduled\"]})}),/*#__PURE__*/_jsx(\"td\",{className:\"px-6 py-4 whitespace-nowrap text-sm font-medium\",children:/*#__PURE__*/_jsx(\"button\",{className:\"text-sy-green-600 hover:text-sy-green-900\",onClick:()=>{// TODO: Add toggle clear to build functionality\nconsole.log('Toggle clear to build for:',workOrder.work_order_number);},children:workOrder.clear_to_build?'Mark Not Ready':'Mark Ready'})})]},workOrder.id))})]})})]}),showConfigModal&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\",children:/*#__PURE__*/_jsx(\"div\",{className:\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"mt-3\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-medium text-sy-black-900 mb-4\",children:\"Schedule Configuration\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Hours per Day\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:scheduleConfig.hours_per_day,onChange:e=>setScheduleConfig(prev=>({...prev,hours_per_day:parseInt(e.target.value)})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Days per Week\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:scheduleConfig.days_per_week,onChange:e=>setScheduleConfig(prev=>({...prev,days_per_week:parseInt(e.target.value)})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Efficiency Factor\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.1\",value:scheduleConfig.efficiency_factor,onChange:e=>setScheduleConfig(prev=>({...prev,efficiency_factor:parseFloat(e.target.value)})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-end space-x-3 mt-6\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowConfigModal(false),className:\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-sy-black-700 hover:bg-gray-50\",children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{// Save configuration logic here\nsetShowConfigModal(false);},className:\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sy-green-600 hover:bg-sy-green-700\",children:\"Save\"})]})]})})}),showLineConfigModal&&selectedLineForConfig&&editingLineConfig&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\",onClick:()=>{setShowLineConfigModal(false);setSelectedLineForConfig(null);setEditingLineConfig(null);},children:/*#__PURE__*/_jsx(\"div\",{className:\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\",onClick:e=>e.stopPropagation(),children:/*#__PURE__*/_jsxs(\"div\",{className:\"mt-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between mb-4\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-medium text-sy-black-900\",children:[\"Configure \",selectedLineForConfig.line_name]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setShowLineConfigModal(false);setSelectedLineForConfig(null);setEditingLineConfig(null);},className:\"text-gray-400 hover:text-gray-600\",children:/*#__PURE__*/_jsx(\"svg\",{className:\"h-6 w-6\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,d:\"M6 18L18 6M6 6l12 12\"})})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Hours per Shift\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingLineConfig.hours_per_shift,onChange:e=>setEditingLineConfig(prev=>({...prev,hours_per_shift:parseInt(e.target.value)})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Shifts per Day\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingLineConfig.shifts_per_day,onChange:e=>setEditingLineConfig(prev=>({...prev,shifts_per_day:parseInt(e.target.value)})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Days per Week\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingLineConfig.days_per_week,onChange:e=>setEditingLineConfig(prev=>({...prev,days_per_week:parseInt(e.target.value)})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Time Multiplier\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.1\",value:editingLineConfig.time_multiplier,onChange:e=>setEditingLineConfig(prev=>({...prev,time_multiplier:parseFloat(e.target.value)})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Start Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:editingLineConfig.start_time,onChange:e=>setEditingLineConfig(prev=>({...prev,start_time:e.target.value})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"End Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:editingLineConfig.end_time,onChange:e=>setEditingLineConfig(prev=>({...prev,end_time:e.target.value})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Lunch Break Duration (minutes)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingLineConfig.lunch_break_duration,onChange:e=>setEditingLineConfig(prev=>({...prev,lunch_break_duration:parseInt(e.target.value)})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Lunch Break Start Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:editingLineConfig.lunch_break_start,onChange:e=>setEditingLineConfig(prev=>({...prev,lunch_break_start:e.target.value})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-sy-black-700 mb-2\",children:\"Break Duration (minutes)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingLineConfig.break_duration,onChange:e=>setEditingLineConfig(prev=>({...prev,break_duration:parseInt(e.target.value)})),className:\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-end space-x-3 mt-6\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setShowLineConfigModal(false);setSelectedLineForConfig(null);setEditingLineConfig(null);},className:\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-sy-black-700 hover:bg-gray-50\",children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>updateLineConfig(selectedLineForConfig.id,editingLineConfig),className:\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sy-green-600 hover:bg-sy-green-700\",children:\"Save Configuration\"})]})]})})})]});};export default Schedule;","map":{"version":3,"names":["React","useState","useEffect","useCallback","CalendarIcon","CogIcon","ArrowPathIcon","ExclamationTriangleIcon","CheckCircleIcon","XCircleIcon","useAuth","useSocket","jsx","_jsx","jsxs","_jsxs","Schedule","user","onWorkOrderUpdate","workOrders","setWorkOrders","productionLines","setProductionLines","scheduleConfig","setScheduleConfig","hours_per_day","days_per_week","efficiency_factor","selectedLine","setSelectedLine","selectedDate","setSelectedDate","Date","toISOString","split","viewMode","setViewMode","loading","setLoading","error","setError","successMessage","setSuccessMessage","draggedWorkOrder","setDraggedWorkOrder","showConfigModal","setShowConfigModal","showLineConfigModal","setShowLineConfigModal","selectedLineForConfig","setSelectedLineForConfig","editingLineConfig","setEditingLineConfig","autoScheduleRunning","setAutoScheduleRunning","baseUrl","process","env","NODE_ENV","window","location","origin","fetchWorkOrders","_data$work_orders","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","console","log","work_orders","length","scheduledInResponse","filter","wo","scheduled_start_time","slice","map","number","work_order_number","start","end","scheduled_end_time","line","line_name","err","fetchProductionLines","production_lines","updateWorkOrderSchedule","workOrderId","scheduleData","method","body","JSON","stringify","runAutoSchedule","includes","role","lockedWorkOrders","Set","workOrdersByLine","sort","a","b","getTime","reduce","acc","push","Object","values","forEach","lineWorkOrders","add","id","size","unlockedScheduledWorkOrders","has","workOrder","line_id","availableWorkOrders","status","clear_to_build","availableLines","toLowerCase","auto_schedule_enabled","totalWorkOrders","completedWorkOrders","cancelledWorkOrders","scheduledWorkOrders","totalLines","maintenanceLines","downLines","handPlacementLines","disabledLines","calculateWorkOrderPriority","priority","ship_date","daysUntilShip","Math","ceil","abs","max","kit_date","daysUntilKit","statusPriority","prioritizedWorkOrders","priorityA","priorityB","calculateLineScore","score","setupHours","setup_hours_estimated","productionHours","production_time_hours_estimated","productionDays","production_time_days_estimated","totalDurationHours","dailyCapacity","shifts_per_day","hours_per_shift","available_capacity","efficiency_target","time_multiplier","line_type","current_utilization","lineSchedules","latestEnd","daysOut","toLocaleDateString","bestLine","bestScore","bestStartTime","daysRequired","lineScore","availableSlot","findBestMultiDaySlot","now","daysFromNow","timeScore","workOrderEndTime","setTime","allLineEndTimes","pl","maxLineEndTime","lineCurrentEndTime","latest","loadBalanceScore","totalScore","toFixed","adjustedDuration","endTime","workingHoursPerDay","setHours","getHours","remainingHours","currentDay","hoursThisDay","min","setDate","getDate","getDay","startHour","start_time","Number","line_position","scheduleError","message","setTimeout","currentWorkOrders","targetDate","earliestSlot","findEarliestMultiDaySlot","shipDate","earliestDaysFromStart","earliestEndDate","remainingDays","dayOfWeek","threeWeeksBeforeDue","targetStartDate","laterSlot","startTimeStr","endTimeStr","end_time","startMinute","endHour","endMinute","checkDate","lineDailyCapacity","estimatedDays","maxLookAhead","dayOffset","currentCheckDate","consecutiveDaysAvailable","dayIndex","checkingDate","checkingDayOfWeek","daySchedules","woStart","woEnd","dayStart","dayEnd","usedCapacity","total","overlapStart","overlapEnd","overlapDuration","dailyHoursNeeded","startTime","findEarliestAvailableSlot","toDateString","currentTime","slotEndTime","hasConflict","some","schedule","scheduleStart","scheduleEnd","nextConflict","find","openLineConfig","lunch_break_duration","lunch_break_start","break_duration","maintenance_interval_days","updateLineConfig","lineId","config","errorData","text","result","handleDragStart","handleDragOver","e","preventDefault","handleDrop","targetLineId","targetTime","targetDateTime","endDateTime","loadData","Promise","all","unsubscribe","filteredWorkOrders","generateTimelineSlots","slots","index","duration","toTimeString","position","className","children","onClick","disabled","type","value","onChange","target","style","gridTemplateColumns","Array","from","_","i","title","timeSlot","scheduledWorkOrder","slot","onDragOver","onDrop","workOrdersByDate","startDate","sortedDates","keys","date","orders","dateObj","dayName","weekday","monthDay","month","day","customer_name","assembly_number","quantity","toLocaleTimeString","hour","minute","draggable","onDragStart","prev","parseInt","step","parseFloat","stopPropagation","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d"],"sources":["/Users/mattspacegrey/Documents/GitHub/SMT_DATABASE_01/src/pages/Schedule.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { \n  CalendarIcon, \n  CogIcon, \n  ArrowPathIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  XCircleIcon\n} from '@heroicons/react/24/outline';\nimport { useAuth } from '../contexts/AuthContext.tsx';\nimport { useSocket } from '../contexts/SocketContext.tsx';\n\ninterface WorkOrder {\n  id: string;\n  work_order_number: string;\n  quantity: number;\n  status: string;\n  clear_to_build: boolean; // New field\n  kit_date: string | null;\n  ship_date: string | null;\n  setup_hours_estimated: number | null;\n  production_time_hours_estimated: number | null;\n  production_time_days_estimated: number | null;\n  setup_hours_actual: number | null;\n  production_time_hours_actual: number | null;\n  production_time_days_actual: number | null;\n  completion_date: string | null;\n  trolley_number: number | null;\n  line_id: string | null;\n  line_position: number | null;\n  scheduled_start_time: string | null;\n  scheduled_end_time: string | null;\n  is_hand_placed: boolean;\n  created_at: string;\n  updated_at: string;\n  assembly_number: string;\n  revision: string;\n  description: string | null;\n  customer_name: string;\n  customer_id: string;\n  line_name: string | null;\n  line_type: string | null;\n}\n\ninterface ProductionLine {\n  id: string;\n  line_name: string;\n  line_type: string;\n  status: string;\n  current_utilization: number;\n  available_capacity: number;\n  time_multiplier: number;\n  hours_per_shift: number;\n  shifts_per_day: number;\n  days_per_week: number;\n  start_time: string;\n  end_time: string;\n  lunch_break_duration: number;\n  lunch_break_start: string;\n  break_duration: number;\n  auto_schedule_enabled?: boolean;\n  maintenance_interval_days?: number;\n  efficiency_target?: number;\n  next_available_slot?: string;\n}\n\ninterface ScheduleConfig {\n  hours_per_day: number;\n  days_per_week: number;\n  efficiency_factor: number;\n}\n\ninterface LineConfig {\n  hours_per_shift: number;\n  shifts_per_day: number;\n  days_per_week: number;\n  time_multiplier: number;\n  start_time: string;\n  end_time: string;\n  lunch_break_duration: number;\n  lunch_break_start: string;\n  break_duration: number;\n  auto_schedule_enabled: boolean;\n  maintenance_interval_days: number;\n  efficiency_target: number;\n}\n\ninterface TimelineSlot {\n  workOrder: WorkOrder;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  position: number;\n}\n\nconst Schedule: React.FC = () => {\n  const { user } = useAuth();\n  const { onWorkOrderUpdate } = useSocket();\n  \n  // State management\n  const [workOrders, setWorkOrders] = useState<WorkOrder[]>([]);\n  const [productionLines, setProductionLines] = useState<ProductionLine[]>([]);\n  const [scheduleConfig, setScheduleConfig] = useState<ScheduleConfig>({\n    hours_per_day: 8,\n    days_per_week: 5,\n    efficiency_factor: 1.0\n  });\n  \n  // UI State\n  const [selectedLine, setSelectedLine] = useState<string>('all');\n  const [selectedDate, setSelectedDate] = useState<string>(new Date().toISOString().split('T')[0]);\n  const [viewMode, setViewMode] = useState<'timeline' | 'calendar' | 'list'>('timeline');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [draggedWorkOrder, setDraggedWorkOrder] = useState<WorkOrder | null>(null);\n  const [showConfigModal, setShowConfigModal] = useState(false);\n  const [showLineConfigModal, setShowLineConfigModal] = useState(false);\n  const [selectedLineForConfig, setSelectedLineForConfig] = useState<ProductionLine | null>(null);\n  const [editingLineConfig, setEditingLineConfig] = useState<LineConfig | null>(null);\n  const [autoScheduleRunning, setAutoScheduleRunning] = useState(false);\n\n  // API base URL - use production for local development since local database isn't set up\n  const baseUrl = process.env.NODE_ENV === 'production' \n    ? window.location.origin\n    : 'https://smtdatabase01-production.up.railway.app';\n\n  // Fetch work orders\n  const fetchWorkOrders = useCallback(async () => {\n    try {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`${baseUrl}/api/schedule/timeline`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch work orders');\n      \n      const data = await response.json();\n      console.log('📥 API Response - Total work orders:', data.work_orders?.length || 0);\n      \n      // Debug: Check scheduled work orders in API response\n      const scheduledInResponse = (data.work_orders || []).filter((wo: WorkOrder) => wo.scheduled_start_time);\n      console.log('📅 Work orders with scheduled_start_time in API response:', scheduledInResponse.length);\n      \n      if (scheduledInResponse.length > 0) {\n        console.log('📋 First few scheduled work orders from API:', scheduledInResponse.slice(0, 3).map((wo: WorkOrder) => ({\n          number: wo.work_order_number,\n          start: wo.scheduled_start_time,\n          end: wo.scheduled_end_time,\n          line: wo.line_name\n        })));\n      }\n      \n      setWorkOrders(data.work_orders || []);\n    } catch (err) {\n      console.error('Error fetching work orders:', err);\n      setError('Failed to load work orders');\n    }\n  }, [baseUrl]);\n\n  // Fetch production lines\n  const fetchProductionLines = useCallback(async () => {\n    try {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`${baseUrl}/api/production-lines`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch production lines');\n      \n      const data = await response.json();\n      setProductionLines(data.production_lines || []);\n    } catch (err) {\n      console.error('Error fetching production lines:', err);\n      setError('Failed to load production lines');\n    }\n  }, [baseUrl]);\n\n  // Update work order schedule\n  const updateWorkOrderSchedule = useCallback(async (workOrderId: string, scheduleData: any) => {\n    try {\n      const response = await fetch(`${baseUrl}/api/schedule/work-orders/${workOrderId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n        },\n        body: JSON.stringify(scheduleData)\n      });\n\n      if (!response.ok) throw new Error('Failed to update schedule');\n      \n      return await response.json();\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      throw err;\n    }\n  }, [baseUrl]);\n\n  // Enhanced auto-schedule algorithm\n  const runAutoSchedule = useCallback(async () => {\n    if (!user || !['admin', 'scheduler'].includes(user.role)) {\n      setError('Insufficient permissions for auto-scheduling');\n      return;\n    }\n\n    setAutoScheduleRunning(true);\n    try {\n      console.log('🚀 Starting auto-schedule...');\n      console.log('👤 User role:', user.role);\n      console.log('🌐 Base URL:', baseUrl);\n      console.log('🔑 Auth token exists:', !!localStorage.getItem('auth_token'));\n      // Get locked work orders (first 2 on each line) that should not be moved\n      const lockedWorkOrders = new Set();\n      \n      // Group scheduled work orders by line and find first 2 on each line\n      const workOrdersByLine = workOrders\n        .filter(wo => wo.scheduled_start_time && wo.line_name)\n        .sort((a, b) => new Date(a.scheduled_start_time!).getTime() - new Date(b.scheduled_start_time!).getTime())\n        .reduce((acc, wo) => {\n          if (!acc[wo.line_name!]) acc[wo.line_name!] = [];\n          acc[wo.line_name!].push(wo);\n          return acc;\n        }, {} as Record<string, typeof workOrders>);\n      \n      // Mark first 2 work orders on each line as locked\n      Object.values(workOrdersByLine).forEach(lineWorkOrders => {\n        lineWorkOrders.slice(0, 2).forEach(wo => {\n          lockedWorkOrders.add(wo.id);\n        });\n      });\n      \n      console.log(`🔒 Locked ${lockedWorkOrders.size} work orders (first 2 on each line)`);\n      \n      // Clear schedules for unlocked work orders (keep first 2 on each line)\n      const unlockedScheduledWorkOrders = workOrders.filter(wo => \n        wo.scheduled_start_time && !lockedWorkOrders.has(wo.id)\n      );\n      \n      console.log(`🔄 Clearing ${unlockedScheduledWorkOrders.length} unlocked scheduled work orders for re-optimization`);\n      \n      // Clear schedules for unlocked work orders\n      for (const workOrder of unlockedScheduledWorkOrders) {\n        try {\n          await updateWorkOrderSchedule(workOrder.id, {\n            scheduled_start_time: null,\n            scheduled_end_time: null,\n            line_id: null\n          });\n        } catch (error) {\n          console.error(`Failed to clear schedule for ${workOrder.work_order_number}:`, error);\n        }\n      }\n      \n      // Get available work orders (not completed, cancelled, or locked)\n      const availableWorkOrders = workOrders.filter(wo => \n        wo.status !== 'Completed' && \n        wo.status !== 'Cancelled' && \n        (!wo.scheduled_start_time || !lockedWorkOrders.has(wo.id)) // Include unlocked scheduled orders\n        // Note: clear_to_build filtering removed for now since column doesn't exist in DB\n      );\n\n      // Debug logging\n      console.log('Total work orders:', workOrders.length);\n      console.log('Available work orders:', availableWorkOrders.length);\n      console.log('Work order statuses:', [...new Set(workOrders.map(wo => wo.status))]);\n      console.log('Scheduled work orders:', workOrders.filter(wo => wo.scheduled_start_time).length);\n      console.log('Clear to build statuses:', [...new Set(workOrders.map(wo => wo.clear_to_build))]);\n\n      // Get available production lines (exclude Hand Placement and disabled lines)\n      const availableLines = productionLines.filter(line => \n        line.status !== 'maintenance' &&\n        line.status !== 'down' &&\n        !line.line_name.toLowerCase().includes('hand') &&\n        line.auto_schedule_enabled !== false\n      );\n\n      // Debug logging for production lines\n      console.log('Total production lines:', productionLines.length);\n      console.log('Available production lines:', availableLines.length);\n      console.log('Line statuses:', [...new Set(productionLines.map(line => line.status))]);\n      console.log('Line names:', productionLines.map(line => line.line_name));\n\n      if (availableWorkOrders.length === 0) {\n        const totalWorkOrders = workOrders.length;\n        const completedWorkOrders = workOrders.filter(wo => wo.status === 'Completed').length;\n        const cancelledWorkOrders = workOrders.filter(wo => wo.status === 'Cancelled').length;\n        const scheduledWorkOrders = workOrders.filter(wo => wo.scheduled_start_time).length;\n                setError(`No work orders available for scheduling. Total: ${totalWorkOrders}, Completed: ${completedWorkOrders}, Cancelled: ${cancelledWorkOrders}, Already Scheduled: ${scheduledWorkOrders}`);\n        return;\n      }\n\n      if (availableLines.length === 0) {\n        const totalLines = productionLines.length;\n        const maintenanceLines = productionLines.filter(line => line.status === 'maintenance').length;\n        const downLines = productionLines.filter(line => line.status === 'down').length;\n        const handPlacementLines = productionLines.filter(line => line.line_name.toLowerCase().includes('hand')).length;\n        const disabledLines = productionLines.filter(line => line.auto_schedule_enabled === false).length;\n        \n        setError(`No production lines available for scheduling. Total: ${totalLines}, Maintenance: ${maintenanceLines}, Down: ${downLines}, Hand Placement: ${handPlacementLines}, Auto-schedule Disabled: ${disabledLines}`);\n        return;\n      }\n\n      // Enhanced priority scoring system focused on due date adherence\n      const calculateWorkOrderPriority = (wo: WorkOrder) => {\n        let priority = 0;\n        \n        // Ship date priority - primary factor (finish as close to due date as possible)\n        if (wo.ship_date) {\n          const daysUntilShip = Math.ceil((new Date(wo.ship_date).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n          \n          if (daysUntilShip <= 0) {\n            // Past due - HIGHEST priority\n            priority += 1000 + Math.abs(daysUntilShip);\n          } else if (daysUntilShip <= 21) {\n            // Due within 3 weeks - high priority, closer to due date = higher priority\n            priority += 500 + (21 - daysUntilShip) * 20;\n          } else {\n            // Due further out - lower priority\n            priority += Math.max(0, 100 - daysUntilShip);\n          }\n        } else {\n          // No ship date - medium priority\n          priority += 200;\n        }\n        \n        // Kit date priority (secondary factor)\n        if (wo.kit_date) {\n          const daysUntilKit = Math.ceil((new Date(wo.kit_date).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n          if (daysUntilKit <= 7) {\n            priority += Math.max(0, 7 - daysUntilKit) * 5;\n          }\n        }\n        \n        // Status priority (ready work orders should be scheduled)\n        const statusPriority = {\n          'Ready': 50,\n          'Ready*': 50,\n          '1st Side Ready': 45,\n          'In Progress': 40,\n          'Pending': 20,\n          'On Hold': 5\n        };\n        priority += statusPriority[wo.status as keyof typeof statusPriority] || 0;\n        \n        return priority;\n      };\n\n      // Sort work orders by enhanced priority\n      const prioritizedWorkOrders = [...availableWorkOrders].sort((a, b) => {\n        const priorityA = calculateWorkOrderPriority(a);\n        const priorityB = calculateWorkOrderPriority(b);\n        return priorityB - priorityA; // Higher priority first\n      });\n\n      // Line scoring system\n      const calculateLineScore = (line: ProductionLine, workOrder: WorkOrder) => {\n        let score = 0;\n        \n        // Calculate work order duration\n        const setupHours = workOrder.setup_hours_estimated || 0;\n        const productionHours = workOrder.production_time_hours_estimated || 0;\n        const productionDays = workOrder.production_time_days_estimated || 0;\n        const totalDurationHours = setupHours + productionHours + (productionDays * 8);\n        \n        // Daily capacity preference (prefer lines with higher daily capacity)\n        const dailyCapacity = (line.shifts_per_day || 1) * (line.hours_per_shift || 8);\n        score += dailyCapacity * 2; // Directly reward higher daily capacity\n        \n        // Available capacity bonus (remaining capacity for more work)\n        score += (line.available_capacity || 0) * 3;\n        \n        // Efficiency score (prefer more efficient lines)\n        score += (line.efficiency_target || 85) / 10;\n        \n        // Time multiplier preference (prefer lines with lower multipliers for faster processing)\n        score += (1 / (line.time_multiplier || 1.0)) * 10;\n        \n        // Line type preference (prefer SMT over other types)\n        if (line.line_type === 'SMT') {\n          score += 15;\n        }\n        \n        // Current utilization (prefer less busy lines)\n        score += (1 - (line.current_utilization || 0) / 100) * 10;\n        \n        return score;\n      };\n\n      // Track scheduled work orders for conflict detection\n      const scheduledWorkOrders = workOrders.filter(wo => wo.scheduled_start_time);\n      \n      // Log current line utilization for load balancing visibility\n      console.log('📊 Current line utilization:');\n      productionLines.forEach(line => {\n        const lineSchedules = scheduledWorkOrders.filter(wo => wo.line_id === line.id && wo.scheduled_end_time);\n        const latestEnd = lineSchedules.length > 0 \n          ? new Date(Math.max(...lineSchedules.map(wo => new Date(wo.scheduled_end_time!).getTime())))\n          : new Date();\n        const daysOut = Math.ceil((latestEnd.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n        console.log(`  ${line.line_name}: scheduled to ${latestEnd.toLocaleDateString()} (${daysOut} days out)`);\n      });\n      \n      // Schedule work orders\n      for (const workOrder of prioritizedWorkOrders) {\n        // Calculate work order duration\n        const setupHours = workOrder.setup_hours_estimated || 0;\n        const productionHours = workOrder.production_time_hours_estimated || 0;\n        const productionDays = workOrder.production_time_days_estimated || 0;\n        const totalDurationHours = setupHours + productionHours + (productionDays * 8);\n\n        // Find best line for this work order\n        let bestLine: ProductionLine | null = null;\n        let bestScore = -1;\n        let bestStartTime: Date | null = null;\n\n        for (const line of availableLines) {\n          console.log(`🔍 Checking line ${line.line_name}:`);\n          \n          // Calculate daily capacity for this line\n          const dailyCapacity = (line.shifts_per_day || 1) * (line.hours_per_shift || 8);\n          console.log(`  Daily capacity: ${dailyCapacity} hours/day`);\n          console.log(`  Required duration: ${totalDurationHours} hours total`);\n          \n                  // Calculate how many days this work order will need\n        const daysRequired = Math.ceil(totalDurationHours / dailyCapacity);\n        console.log(`  Days required: ${daysRequired} days`);\n        \n        // Special logging for long work orders\n        if (totalDurationHours > 50) {\n          console.log(`🚨 LONG WORK ORDER: ${workOrder.work_order_number} needs ${totalDurationHours}h (${daysRequired} days)`);\n          console.log(`  Line: ${line.line_name} (${dailyCapacity}h/day)`);\n          console.log(`  Due date: ${workOrder.ship_date}`);\n        }\n          \n          // Check if work order can fit within daily capacity (even if it spans multiple days)\n          if (dailyCapacity === 0) {\n            console.log(`  ❌ No daily capacity configured`);\n            continue;\n          }\n\n                  // Calculate line score\n        const lineScore = calculateLineScore(line, workOrder);\n        console.log(`  📊 Line score: ${lineScore}`);\n        console.log(`  📋 Line details: capacity=${line.available_capacity}, shifts=${line.shifts_per_day}, hours=${line.hours_per_shift}, multiplier=${line.time_multiplier}`);\n          \n          // Find best available multi-day slot on this line (considering due dates)\n          const availableSlot = findBestMultiDaySlot(line, workOrder, scheduledWorkOrders, selectedDate, daysRequired);\n          console.log(`  ⏰ Available slot: ${availableSlot ? availableSlot.toISOString() : 'None'}`);\n          \n          if (availableSlot) {\n            // Calculate completion time score (earlier start = higher score)\n            const now = new Date();\n            const daysFromNow = Math.ceil((availableSlot.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n            const timeScore = Math.max(0, 100 - daysFromNow); // 100 points for immediate start, decreases by 1 per day\n            \n            // Calculate load balancing score - reward less busy lines for maximum throughput\n            const workOrderEndTime = new Date(availableSlot);\n            workOrderEndTime.setTime(workOrderEndTime.getTime() + (totalDurationHours * (line.time_multiplier || 1.0) * 60 * 60 * 1000));\n            \n            // Find the latest end time across all lines to normalize load balancing\n            const allLineEndTimes = productionLines.map(pl => {\n              const lineSchedules = scheduledWorkOrders.filter(wo => wo.line_id === pl.id && wo.scheduled_end_time);\n              if (lineSchedules.length === 0) return now.getTime();\n              return Math.max(...lineSchedules.map(wo => new Date(wo.scheduled_end_time!).getTime()));\n            });\n            const maxLineEndTime = Math.max(...allLineEndTimes);\n            \n            // Load balance score: reward lines that will finish earlier (less backed up)\n            const lineCurrentEndTime = scheduledWorkOrders\n              .filter(wo => wo.line_id === line.id && wo.scheduled_end_time)\n              .reduce((latest, wo) => Math.max(latest, new Date(wo.scheduled_end_time!).getTime()), now.getTime());\n            \n            const loadBalanceScore = Math.max(0, (maxLineEndTime - lineCurrentEndTime) / (1000 * 60 * 60 * 24) * 15); // 15 points per day difference\n            \n            // Combined score: line quality + timing + load balancing\n            const totalScore = lineScore + timeScore + loadBalanceScore;\n            console.log(`  ⏰ Days from now: ${daysFromNow}, Time score: ${timeScore}, Load balance: ${loadBalanceScore.toFixed(1)}, Total score: ${totalScore.toFixed(1)}`);\n            \n            if (totalScore > bestScore) {\n              console.log(`  ✅ New best line! (was ${bestScore}, now ${totalScore.toFixed(1)})`);\n              bestLine = line;\n              bestScore = totalScore;\n              bestStartTime = availableSlot;\n            }\n          }\n        }\n\n        if (bestLine && bestStartTime) {\n          // Calculate end time for multi-day scheduling\n          const adjustedDuration = totalDurationHours * (bestLine.time_multiplier || 1.0);\n          const dailyCapacity = (bestLine.shifts_per_day || 1) * (bestLine.hours_per_shift || 8);\n          const daysRequired = Math.ceil(adjustedDuration / dailyCapacity);\n          \n          // Calculate actual end time considering daily work hours\n          const endTime = new Date(bestStartTime);\n          const workingHoursPerDay = bestLine.hours_per_shift || 8;\n          \n          if (daysRequired === 1) {\n            // Single day: just add the duration\n            endTime.setHours(endTime.getHours() + adjustedDuration);\n          } else {\n            // Multi-day: calculate based on working days and daily capacity\n            let remainingHours = adjustedDuration;\n            let currentDay = new Date(bestStartTime);\n            \n            while (remainingHours > 0) {\n              const hoursThisDay = Math.min(remainingHours, workingHoursPerDay);\n              remainingHours -= hoursThisDay;\n              \n              if (remainingHours > 0) {\n                // Move to next working day\n                currentDay.setDate(currentDay.getDate() + 1);\n                // Skip weekends if line doesn't work weekends\n                while ((bestLine.days_per_week || 5) === 5 && (currentDay.getDay() === 0 || currentDay.getDay() === 6)) {\n                  currentDay.setDate(currentDay.getDate() + 1);\n                }\n              } else {\n                // Last day - calculate exact end time\n                const [startHour] = (bestLine.start_time || '08:00').split(':').map(Number);\n                currentDay.setHours(startHour + hoursThisDay);\n              }\n            }\n            \n            endTime.setTime(currentDay.getTime());\n          }\n\n          console.log(`📅 Scheduling work order ${workOrder.work_order_number} on ${bestLine.line_name}`);\n          console.log(`⏰ Start: ${bestStartTime.toISOString()}, End: ${endTime.toISOString()}`);\n          console.log(`🆔 Work Order ID being sent to API: \"${workOrder.id}\" (type: ${typeof workOrder.id})`);\n\n          // Update work order with schedule\n          try {\n            await updateWorkOrderSchedule(workOrder.id, {\n              line_id: bestLine.id,\n              scheduled_start_time: bestStartTime.toISOString(),\n              scheduled_end_time: endTime.toISOString(),\n              line_position: 1\n            });\n            console.log(`✅ Successfully scheduled work order ${workOrder.work_order_number}`);\n          } catch (scheduleError) {\n            console.error(`❌ Failed to schedule work order ${workOrder.work_order_number}:`, scheduleError);\n            throw new Error(`Failed to schedule work order ${workOrder.work_order_number}: ${scheduleError.message}`);\n          }\n\n          // Add to scheduled work orders for conflict detection\n          scheduledWorkOrders.push({\n            ...workOrder,\n            line_id: bestLine.id,\n            scheduled_start_time: bestStartTime.toISOString(),\n            scheduled_end_time: endTime.toISOString()\n          });\n        }\n      }\n\n      // Refresh data\n      console.log('🔄 Refreshing work orders after auto-scheduling...');\n      await fetchWorkOrders();\n      \n      // Debug: Check if work orders have scheduled times after refresh (use a ref to avoid stale closure)\n      setTimeout(() => {\n        const currentWorkOrders = workOrders; // This might be stale, let's remove this debug for now\n        console.log('🔄 Data refresh completed after auto-scheduling');\n      }, 100);\n      \n      setSuccessMessage('Auto-schedule completed successfully');\n      setTimeout(() => setSuccessMessage(null), 3000);\n      setError(null);\n    } catch (err) {\n      console.error('Auto-schedule error:', err);\n      setError('Auto-scheduling failed: ' + (err instanceof Error ? err.message : 'Unknown error'));\n    } finally {\n      setAutoScheduleRunning(false);\n    }\n  }, [productionLines, selectedDate, user, updateWorkOrderSchedule, fetchWorkOrders]);\n\n  // Helper function to find best available multi-day time slot considering due dates\n  const findBestMultiDaySlot = (\n    line: ProductionLine, \n    workOrder: WorkOrder, \n    scheduledWorkOrders: WorkOrder[], \n    targetDate: string,\n    daysRequired: number\n  ): Date | null => {\n    const earliestSlot = findEarliestMultiDaySlot(line, workOrder, scheduledWorkOrders, targetDate, daysRequired);\n    if (!earliestSlot || !workOrder.ship_date) {\n      return earliestSlot;\n    }\n\n    // Calculate work order duration for end date calculation\n    const setupHours = workOrder.setup_hours_estimated || 0;\n    const productionHours = workOrder.production_time_hours_estimated || 0;\n    const productionDays = workOrder.production_time_days_estimated || 0;\n    const totalDurationHours = setupHours + productionHours + (productionDays * 8);\n    const adjustedDuration = totalDurationHours * (line.time_multiplier || 1.0);\n    const dailyCapacity = (line.shifts_per_day || 1) * (line.hours_per_shift || 8);\n    \n    const shipDate = new Date(workOrder.ship_date);\n    const earliestDaysFromStart = Math.ceil(adjustedDuration / dailyCapacity);\n    \n    // Calculate earliest finish date\n    const earliestEndDate = new Date(earliestSlot);\n    let remainingDays = earliestDaysFromStart;\n    while (remainingDays > 0) {\n      earliestEndDate.setDate(earliestEndDate.getDate() + 1);\n      // Skip weekends if line doesn't work weekends\n      const dayOfWeek = earliestEndDate.getDay();\n      if ((line.days_per_week || 5) === 5 && (dayOfWeek === 0 || dayOfWeek === 6)) {\n        continue;\n      }\n      remainingDays--;\n    }\n\n    // If earliest finish is more than 3 weeks before due date, try to find a later slot\n    const threeWeeksBeforeDue = new Date(shipDate);\n    threeWeeksBeforeDue.setDate(threeWeeksBeforeDue.getDate() - 21);\n    \n    if (earliestEndDate < threeWeeksBeforeDue) {\n      // Try to find a slot that finishes closer to the due date\n      const targetStartDate = new Date(threeWeeksBeforeDue);\n      targetStartDate.setDate(targetStartDate.getDate() - earliestDaysFromStart);\n      \n      const laterSlot = findEarliestMultiDaySlot(line, workOrder, scheduledWorkOrders, targetStartDate.toISOString().split('T')[0], daysRequired);\n      if (laterSlot) {\n        return laterSlot;\n      }\n    }\n\n    return earliestSlot;\n  };\n\n  // Helper function to find earliest available multi-day time slot\n  const findEarliestMultiDaySlot = (\n    line: ProductionLine, \n    workOrder: WorkOrder, \n    scheduledWorkOrders: WorkOrder[], \n    targetDate: string,\n    daysRequired: number\n  ): Date | null => {\n    // Parse line work hours\n    const startTimeStr = line.start_time || '08:00';\n    const endTimeStr = line.end_time || '17:00';\n    const [startHour, startMinute] = startTimeStr.split(':').map(Number);\n    const [endHour, endMinute] = endTimeStr.split(':').map(Number);\n\n    // Calculate daily capacity and work order duration\n    const dailyCapacity = (line.shifts_per_day || 1) * (line.hours_per_shift || 8);\n    const setupHours = workOrder.setup_hours_estimated || 0;\n    const productionHours = workOrder.production_time_hours_estimated || 0;\n    const productionDays = workOrder.production_time_days_estimated || 0;\n    const totalDurationHours = setupHours + productionHours + (productionDays * 8);\n\n    // Start checking from the target date\n    let checkDate = new Date(targetDate);\n    // Extended look-ahead for very long work orders that need more time\n    const adjustedDuration = (workOrder.setup_hours_estimated || 0) + \n                            (workOrder.production_time_hours_estimated || 0) + \n                            ((workOrder.production_time_days_estimated || 0) * 8);\n    const lineDailyCapacity = (line.shifts_per_day || 1) * (line.hours_per_shift || 8);\n    const estimatedDays = Math.ceil(adjustedDuration / Math.max(lineDailyCapacity, 1));\n    \n    // Use longer look-ahead for work orders that need more than 30 days\n    const maxLookAhead = estimatedDays > 30 ? Math.min(90, estimatedDays + 30) : 45;\n    \n    for (let dayOffset = 0; dayOffset < maxLookAhead; dayOffset++) {\n      const currentCheckDate = new Date(checkDate);\n      currentCheckDate.setDate(checkDate.getDate() + dayOffset);\n      \n      // Skip weekends if line doesn't work weekends\n      const dayOfWeek = currentCheckDate.getDay();\n      if ((line.days_per_week || 5) === 5 && (dayOfWeek === 0 || dayOfWeek === 6)) {\n        continue;\n      }\n\n      // Check if we have consecutive available days starting from this date\n      let consecutiveDaysAvailable = true;\n      \n      for (let dayIndex = 0; dayIndex < daysRequired; dayIndex++) {\n        const checkingDate = new Date(currentCheckDate);\n        checkingDate.setDate(currentCheckDate.getDate() + dayIndex);\n        \n        // Skip weekends for additional days too\n        const checkingDayOfWeek = checkingDate.getDay();\n        if ((line.days_per_week || 5) === 5 && (checkingDayOfWeek === 0 || checkingDayOfWeek === 6)) {\n          consecutiveDaysAvailable = false;\n          break;\n        }\n\n        // Get existing schedules for this line that overlap with this specific date\n        const daySchedules = scheduledWorkOrders.filter(wo => {\n          if (wo.line_id !== line.id || !wo.scheduled_start_time || !wo.scheduled_end_time) {\n            return false;\n          }\n          \n          const woStart = new Date(wo.scheduled_start_time);\n          const woEnd = new Date(wo.scheduled_end_time);\n          \n          // Check if the work order overlaps with the checking date\n          const dayStart = new Date(checkingDate);\n          dayStart.setHours(0, 0, 0, 0);\n          const dayEnd = new Date(checkingDate);\n          dayEnd.setHours(23, 59, 59, 999);\n          \n          // Work order overlaps if it starts before day ends AND ends after day starts\n          return woStart <= dayEnd && woEnd >= dayStart;\n        });\n\n        // Calculate how much capacity is used this day (only count the portion that overlaps with this day)\n        const usedCapacity = daySchedules.reduce((total, wo) => {\n          const woStart = new Date(wo.scheduled_start_time!);\n          const woEnd = new Date(wo.scheduled_end_time!);\n          \n          // Calculate the overlap between work order and this day\n          const dayStart = new Date(checkingDate);\n          dayStart.setHours(startHour, startMinute, 0, 0);\n          const dayEnd = new Date(checkingDate);\n          dayEnd.setHours(endHour, endMinute, 0, 0);\n          \n          // Find the actual overlap period\n          const overlapStart = new Date(Math.max(woStart.getTime(), dayStart.getTime()));\n          const overlapEnd = new Date(Math.min(woEnd.getTime(), dayEnd.getTime()));\n          \n          // Calculate duration of overlap in hours\n          const overlapDuration = Math.max(0, (overlapEnd.getTime() - overlapStart.getTime()) / (1000 * 60 * 60));\n          return total + overlapDuration;\n        }, 0);\n\n        // Check if we have enough remaining capacity for this day's portion\n        const dailyHoursNeeded = Math.min(totalDurationHours - (dayIndex * dailyCapacity), dailyCapacity);\n        \n        if (usedCapacity + dailyHoursNeeded > dailyCapacity) {\n          consecutiveDaysAvailable = false;\n          break;\n        }\n      }\n\n      if (consecutiveDaysAvailable) {\n        // Found a valid starting date - return the start time\n        const startTime = new Date(currentCheckDate);\n        startTime.setHours(startHour, startMinute, 0, 0);\n        return startTime;\n      }\n    }\n\n    return null;\n  };\n\n  // Helper function to find earliest available time slot\n  const findEarliestAvailableSlot = (\n    line: ProductionLine, \n    workOrder: WorkOrder, \n    scheduledWorkOrders: WorkOrder[], \n    targetDate: string\n  ): Date | null => {\n    // Parse line work hours\n    const startTimeStr = line.start_time || '08:00';\n    const endTimeStr = line.end_time || '17:00';\n    const [startHour, startMinute] = startTimeStr.split(':').map(Number);\n    const [endHour, endMinute] = endTimeStr.split(':').map(Number);\n\n    // Calculate work order duration\n    const setupHours = workOrder.setup_hours_estimated || 0;\n    const productionHours = workOrder.production_time_hours_estimated || 0;\n    const productionDays = workOrder.production_time_days_estimated || 0;\n    const totalDurationHours = setupHours + productionHours + (productionDays * 8);\n    const adjustedDuration = totalDurationHours * (line.time_multiplier || 1.0);\n\n    // Get existing schedules for this line on the target date\n    const lineSchedules = scheduledWorkOrders.filter(wo => \n      wo.line_id === line.id && \n      wo.scheduled_start_time &&\n      wo.scheduled_end_time &&\n      new Date(wo.scheduled_start_time).toDateString() === new Date(targetDate).toDateString()\n    ).sort((a, b) => \n      new Date(a.scheduled_start_time!).getTime() - new Date(b.scheduled_start_time!).getTime()\n    );\n\n    // Start with line opening time\n    let currentTime = new Date(targetDate);\n    currentTime.setHours(startHour, startMinute, 0, 0);\n\n    // Check each potential time slot\n    while (currentTime.getHours() < endHour) {\n      const slotEndTime = new Date(currentTime);\n      slotEndTime.setHours(slotEndTime.getHours() + adjustedDuration);\n\n      // Check if slot extends beyond line closing time\n      if (slotEndTime.getHours() > endHour) {\n        // Move to next day\n        currentTime.setDate(currentTime.getDate() + 1);\n        currentTime.setHours(startHour, startMinute, 0, 0);\n        continue;\n      }\n\n      // Check for conflicts with existing schedules\n      const hasConflict = lineSchedules.some(schedule => {\n        const scheduleStart = new Date(schedule.scheduled_start_time!);\n        const scheduleEnd = new Date(schedule.scheduled_end_time!);\n        \n        return (\n          (currentTime >= scheduleStart && currentTime < scheduleEnd) ||\n          (slotEndTime > scheduleStart && slotEndTime <= scheduleEnd) ||\n          (currentTime <= scheduleStart && slotEndTime >= scheduleEnd)\n        );\n      });\n\n      if (!hasConflict) {\n        return currentTime;\n      }\n\n      // Move to next potential slot (after the conflicting schedule)\n      const nextConflict = lineSchedules.find(schedule => {\n        const scheduleStart = new Date(schedule.scheduled_start_time!);\n        return scheduleStart >= currentTime;\n      });\n\n      if (nextConflict) {\n        currentTime = new Date(nextConflict.scheduled_end_time!);\n      } else {\n        // No more conflicts, but check if we still have time today\n        if (currentTime.getHours() + adjustedDuration <= endHour) {\n          return currentTime;\n        } else {\n          // Move to next day\n          currentTime.setDate(currentTime.getDate() + 1);\n          currentTime.setHours(startHour, startMinute, 0, 0);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  // Line configuration functions\n  const openLineConfig = (line: ProductionLine) => {\n    setSelectedLineForConfig(line);\n    setEditingLineConfig({\n      hours_per_shift: line.hours_per_shift || 8,\n      shifts_per_day: line.shifts_per_day || 1,\n      days_per_week: line.days_per_week || 5,\n      time_multiplier: line.time_multiplier || 1.0,\n      start_time: line.start_time || '08:00',\n      end_time: line.end_time || '17:00',\n      lunch_break_duration: line.lunch_break_duration || 60,\n      lunch_break_start: line.lunch_break_start || '12:00',\n      break_duration: line.break_duration || 15,\n      auto_schedule_enabled: true,\n      maintenance_interval_days: 30,\n      efficiency_target: 85\n    });\n    setShowLineConfigModal(true);\n  };\n\n  const updateLineConfig = async (lineId: string, config: LineConfig) => {\n    try {\n      const token = localStorage.getItem('auth_token');\n      console.log('Updating line config for:', lineId, 'with config:', config);\n      \n      const response = await fetch(`${baseUrl}/api/production-lines/${lineId}/config`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(config)\n      });\n\n      console.log('Response status:', response.status);\n      \n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('Response error:', errorData);\n        throw new Error(`Failed to update line configuration: ${response.status} ${errorData}`);\n      }\n      \n      const result = await response.json();\n      console.log('Update successful:', result);\n      \n      // Refresh production lines data\n      await fetchProductionLines();\n      setShowLineConfigModal(false);\n      setSelectedLineForConfig(null);\n      setEditingLineConfig(null);\n      setError(null); // Clear any previous errors\n      setSuccessMessage(`Line configuration updated successfully for ${selectedLineForConfig?.line_name}`);\n      \n      // Clear success message after 3 seconds\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (err) {\n      console.error('Error updating line config:', err);\n      setError(err instanceof Error ? err.message : 'Failed to update line configuration');\n    }\n  };\n\n  // Drag and drop handlers\n  const handleDragStart = (workOrder: WorkOrder) => {\n    setDraggedWorkOrder(workOrder);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = async (e: React.DragEvent, targetLineId: string, targetTime: string) => {\n    e.preventDefault();\n    \n    if (!draggedWorkOrder) return;\n\n    try {\n      const targetDateTime = new Date(`${selectedDate}T${targetTime}`);\n      const endDateTime = new Date(targetDateTime);\n      \n      // Calculate total duration from available time fields\n      const setupHours = draggedWorkOrder.setup_hours_estimated || 0;\n      const productionHours = draggedWorkOrder.production_time_hours_estimated || 0;\n      const productionDays = draggedWorkOrder.production_time_days_estimated || 0;\n      const totalDurationHours = setupHours + productionHours + (productionDays * 8);\n      \n      endDateTime.setHours(endDateTime.getHours() + totalDurationHours);\n\n      await updateWorkOrderSchedule(draggedWorkOrder.id, {\n        line_id: targetLineId,\n        scheduled_start_time: targetDateTime.toISOString(),\n        scheduled_end_time: endDateTime.toISOString()\n      });\n\n      // Refresh data\n      await fetchWorkOrders();\n      setDraggedWorkOrder(null);\n    } catch (err) {\n      console.error('Drop error:', err);\n      setError('Failed to schedule work order');\n    }\n  };\n\n  // Load data on mount\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      await Promise.all([fetchWorkOrders(), fetchProductionLines()]);\n      setLoading(false);\n    };\n\n    loadData();\n  }, [fetchWorkOrders, fetchProductionLines]);\n\n  // Real-time updates - using the context's event system\n  useEffect(() => {\n    const unsubscribe = onWorkOrderUpdate(() => {\n      fetchWorkOrders();\n    });\n\n    return unsubscribe;\n  }, [onWorkOrderUpdate, fetchWorkOrders]);\n\n  // Filter work orders by selected line\n  const filteredWorkOrders = selectedLine === 'all' \n    ? workOrders \n    : workOrders.filter(wo => wo.line_name === selectedLine);\n\n  // Generate timeline slots\n  const generateTimelineSlots = () => {\n    const slots: TimelineSlot[] = [];\n\n    filteredWorkOrders.forEach((workOrder, index) => {\n      if (workOrder.scheduled_start_time) {\n        const startTime = new Date(workOrder.scheduled_start_time);\n        const endTime = workOrder.scheduled_end_time ? new Date(workOrder.scheduled_end_time) : startTime;\n        const duration = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60); // hours\n\n        slots.push({\n          workOrder,\n          startTime: startTime.toTimeString().slice(0, 5),\n          endTime: endTime.toTimeString().slice(0, 5),\n          duration,\n          position: index\n        });\n      }\n    });\n\n    return slots;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-sy-black-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <ArrowPathIcon className=\"h-8 w-8 text-sy-green-600 mx-auto mb-4 animate-spin\" />\n          <p className=\"text-sy-black-600\">Loading schedule...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-sy-black-900\">Production Schedule</h1>\n          <p className=\"mt-1 text-sm text-sy-black-600\">\n            Manage and optimize production scheduling\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <button\n            onClick={() => setShowConfigModal(true)}\n            className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-sy-black-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sy-green-500\"\n          >\n            <CogIcon className=\"h-4 w-4 mr-2\" />\n            Config\n          </button>\n          \n          {user && ['admin', 'scheduler'].includes(user.role) && (\n            <div className=\"flex items-center space-x-3\">\n              <button\n                onClick={runAutoSchedule}\n                disabled={autoScheduleRunning}\n                className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-sy-green-600 hover:bg-sy-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sy-green-500 disabled:opacity-50\"\n              >\n                {autoScheduleRunning ? (\n                  <ArrowPathIcon className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <CalendarIcon className=\"h-4 w-4 mr-2\" />\n                )}\n                {autoScheduleRunning ? 'Scheduling...' : 'Auto Schedule'}\n              </button>\n              <div className=\"text-xs text-sy-black-500\">\n                <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 mr-1\">\n                  Manual Only\n                </span>\n                Hand Placement excluded\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n          <div className=\"flex\">\n            <ExclamationTriangleIcon className=\"h-5 w-5 text-red-400\" />\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-red-800\">Error</h3>\n              <p className=\"mt-1 text-sm text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Success Display */}\n      {successMessage && (\n        <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\n          <div className=\"flex\">\n            <CheckCircleIcon className=\"h-5 w-5 text-green-400\" />\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-green-800\">Success</h3>\n              <p className=\"mt-1 text-sm text-green-700\">{successMessage}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Controls */}\n      <div className=\"bg-white shadow rounded-lg p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {/* Date Selector */}\n          <div>\n            <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n              Date\n            </label>\n            <input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n            />\n          </div>\n\n          {/* Line Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n              Production Line\n            </label>\n            <select\n              value={selectedLine}\n              onChange={(e) => setSelectedLine(e.target.value)}\n              className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n            >\n              <option value=\"all\">All Lines</option>\n              {productionLines.map(line => (\n                <option key={line.id} value={line.line_name}>\n                  {line.line_name}\n                  {line.line_name.toLowerCase().includes('hand') ? ' (Manual Only)' : ''}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* View Mode */}\n          <div>\n            <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n              View Mode\n            </label>\n            <select\n              value={viewMode}\n              onChange={(e) => setViewMode(e.target.value as any)}\n              className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n            >\n              <option value=\"timeline\">Timeline</option>\n              <option value=\"calendar\">Calendar</option>\n              <option value=\"list\">List</option>\n            </select>\n          </div>\n\n          {/* Stats */}\n          <div>\n            <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n              Summary\n            </label>\n            <div className=\"text-sm text-sy-black-600\">\n              {filteredWorkOrders.length} work orders\n              <br />\n              {filteredWorkOrders.filter(wo => wo.scheduled_start_time).length} scheduled\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Timeline View */}\n      {viewMode === 'timeline' && (\n        <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-medium text-sy-black-900\">Timeline View</h3>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <div className=\"min-w-full\">\n              {/* Time Headers */}\n              <div className=\"grid bg-gray-50 border-b border-gray-200\" style={{ gridTemplateColumns: '200px repeat(12, 1fr)' }}>\n                <div className=\"p-3 text-sm font-medium text-sy-black-700\">Line</div>\n                {Array.from({ length: 12 }, (_, i) => (\n                  <div key={i} className=\"p-3 text-sm font-medium text-sy-black-700 text-center border-l border-gray-200\">\n                    {8 + i}:00\n                  </div>\n                ))}\n              </div>\n\n              {/* Production Lines */}\n              {productionLines.map(line => (\n                <div key={line.id} className=\"grid border-b border-gray-200\" style={{ gridTemplateColumns: '200px repeat(12, 1fr)' }}>\n                  <div className=\"p-3 text-sm font-medium text-sy-black-900 bg-gray-50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{line.line_name}</span>\n                        {line.line_name.toLowerCase().includes('hand') && (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n                            Manual Only\n                          </span>\n                        )}\n                      </div>\n                      {user && ['admin', 'scheduler'].includes(user.role) && (\n                        <button\n                          onClick={() => openLineConfig(line)}\n                          className=\"inline-flex items-center px-2 py-1 border border-gray-300 text-xs font-medium rounded text-sy-black-700 bg-white hover:bg-gray-50\"\n                          title=\"Configure line settings\"\n                        >\n                          <CogIcon className=\"h-3 w-3\" />\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {Array.from({ length: 12 }, (_, i) => {\n                    const timeSlot = `${8 + i}:00`;\n                    const scheduledWorkOrder = generateTimelineSlots().find(slot => \n                      slot.workOrder.line_name === line.line_name &&\n                      slot.startTime === timeSlot\n                    );\n\n                    return (\n                      <div\n                        key={i}\n                        className=\"p-2 border-l border-gray-200 min-h-[60px] relative\"\n                        onDragOver={handleDragOver}\n                        onDrop={(e) => handleDrop(e, line.id, timeSlot)}\n                      >\n                        {scheduledWorkOrder ? (\n                          <div className=\"bg-sy-green-100 border border-sy-green-300 rounded p-2 text-xs\">\n                            <div className=\"font-medium text-sy-green-800\">\n                              {scheduledWorkOrder.workOrder.work_order_number}\n                            </div>\n                            <div className=\"text-sy-green-600\">\n                              {scheduledWorkOrder.duration}h\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"text-gray-400 text-xs\">Available</div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Calendar View */}\n      {viewMode === 'calendar' && (\n        <div className=\"bg-white shadow rounded-lg\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-medium text-sy-black-900\">Calendar View</h3>\n            <p className=\"mt-1 text-sm text-sy-black-600\">\n              Scheduled work orders by date ({filteredWorkOrders.filter(wo => wo.scheduled_start_time).length} scheduled)\n            </p>\n          </div>\n          \n          <div className=\"p-6\">\n            {(() => {\n              // Group scheduled work orders by date\n              const workOrdersByDate = filteredWorkOrders\n                .filter(wo => wo.scheduled_start_time)\n                .reduce((acc, wo) => {\n                  const startDate = new Date(wo.scheduled_start_time!).toISOString().split('T')[0];\n                  if (!acc[startDate]) acc[startDate] = [];\n                  acc[startDate].push(wo);\n                  return acc;\n                }, {} as Record<string, typeof filteredWorkOrders>);\n\n              // Sort dates\n              const sortedDates = Object.keys(workOrdersByDate).sort();\n\n              if (sortedDates.length === 0) {\n                return (\n                  <div className=\"text-center py-12\">\n                    <CalendarIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n                    <h3 className=\"mt-2 text-sm font-medium text-sy-black-900\">No scheduled work orders</h3>\n                    <p className=\"mt-1 text-sm text-sy-black-500\">\n                      Run auto-scheduling to see work orders on the calendar.\n                    </p>\n                  </div>\n                );\n              }\n\n              return (\n                <div className=\"space-y-6\">\n                  {sortedDates.map(date => {\n                    const orders = workOrdersByDate[date];\n                    const dateObj = new Date(date + 'T00:00:00');\n                    const dayName = dateObj.toLocaleDateString('en-US', { weekday: 'long' });\n                    const monthDay = dateObj.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n                    \n                    return (\n                      <div key={date} className=\"border border-gray-200 rounded-lg\">\n                        <div className=\"bg-gray-50 px-4 py-3 border-b border-gray-200\">\n                          <h4 className=\"text-lg font-medium text-sy-black-900\">\n                            {dayName}, {monthDay}\n                            <span className=\"ml-2 text-sm font-normal text-sy-black-500\">\n                              ({orders.length} work order{orders.length !== 1 ? 's' : ''})\n                            </span>\n                          </h4>\n                        </div>\n                        \n                        <div className=\"p-4 space-y-3\">\n                          {orders.map(wo => {\n                            const startTime = new Date(wo.scheduled_start_time!);\n                            const endTime = wo.scheduled_end_time ? new Date(wo.scheduled_end_time) : null;\n                            const duration = (wo.setup_hours_estimated || 0) + (wo.production_time_hours_estimated || 0) + ((wo.production_time_days_estimated || 0) * 8);\n                            \n                            return (\n                              <div key={wo.id} className=\"flex items-center justify-between p-3 bg-sy-black-50 rounded border border-gray-200\">\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center space-x-4\">\n                                    <div className=\"font-medium text-sy-black-900\">\n                                      {wo.work_order_number}\n                                    </div>\n                                    <div className=\"text-sm text-sy-black-600\">\n                                      {wo.customer_name}\n                                    </div>\n                                    <div className=\"text-sm text-sy-black-500\">\n                                      {wo.assembly_number} (Qty: {wo.quantity})\n                                    </div>\n                                  </div>\n                                  <div className=\"mt-1 text-xs text-sy-black-500\">\n                                    {startTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n                                    {endTime && ` - ${endTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}`}\n                                    • {duration.toFixed(1)}h duration\n                                    • {wo.line_name}\n                                  </div>\n                                </div>\n                                \n                                <div className=\"text-right\">\n                                  <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                                    wo.status === 'Ready' || wo.status === 'Ready*' \n                                      ? 'bg-green-100 text-green-800'\n                                      : wo.status === '1st Side Ready'\n                                      ? 'bg-blue-100 text-blue-800'\n                                      : 'bg-gray-100 text-gray-800'\n                                  }`}>\n                                    {wo.status}\n                                  </div>\n                                  {wo.ship_date && (\n                                    <div className=\"mt-1 text-xs text-sy-black-500\">\n                                      Ship: {new Date(wo.ship_date).toLocaleDateString()}\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              );\n            })()}\n          </div>\n        </div>\n      )}\n\n      {/* Work Orders List */}\n      {viewMode === 'list' && (\n        <div className=\"bg-white shadow rounded-lg\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-medium text-sy-black-900\">Work Orders</h3>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\">\n                    Work Order\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\">\n                    Customer\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\">\n                    Assembly\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\">\n                    Clear to Build\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\">\n                    Ship Date\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\">\n                    Duration\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\">\n                    Scheduled\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-sy-black-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredWorkOrders.map((workOrder) => (\n                  <tr \n                    key={workOrder.id}\n                    draggable={workOrder.clear_to_build}\n                    onDragStart={() => workOrder.clear_to_build && handleDragStart(workOrder)}\n                    className={`hover:bg-gray-50 ${workOrder.clear_to_build ? 'cursor-move' : 'cursor-not-allowed opacity-60'}`}\n                  >\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-sy-black-900\">\n                      {workOrder.work_order_number}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\">\n                      {workOrder.customer_name}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\">\n                      {workOrder.assembly_number}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                        workOrder.status === 'Completed' ? 'bg-green-100 text-green-800' :\n                        workOrder.status === 'Cancelled' ? 'bg-red-100 text-red-800' :\n                        'bg-yellow-100 text-yellow-800'\n                      }`}>\n                        {workOrder.status}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                        workOrder.clear_to_build ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                      }`}>\n                        {workOrder.clear_to_build ? 'Yes' : 'No'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\">\n                      {workOrder.ship_date ? new Date(workOrder.ship_date).toLocaleDateString() : 'N/A'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\">\n                      {workOrder.production_time_hours_estimated || 0}h\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-sy-black-500\">\n                      {workOrder.scheduled_start_time ? (\n                        <div className=\"flex items-center\">\n                          <CheckCircleIcon className=\"h-4 w-4 text-green-500 mr-1\" />\n                          {new Date(workOrder.scheduled_start_time).toLocaleDateString()}\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center\">\n                          <XCircleIcon className=\"h-4 w-4 text-red-500 mr-1\" />\n                          Not scheduled\n                        </div>\n                      )}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <button \n                        className=\"text-sy-green-600 hover:text-sy-green-900\"\n                        onClick={() => {\n                          // TODO: Add toggle clear to build functionality\n                          console.log('Toggle clear to build for:', workOrder.work_order_number);\n                        }}\n                      >\n                        {workOrder.clear_to_build ? 'Mark Not Ready' : 'Mark Ready'}\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n\n      {/* Configuration Modal */}\n      {showConfigModal && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n          <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n            <div className=\"mt-3\">\n              <h3 className=\"text-lg font-medium text-sy-black-900 mb-4\">Schedule Configuration</h3>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Hours per Day\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={scheduleConfig.hours_per_day}\n                    onChange={(e) => setScheduleConfig(prev => ({ ...prev, hours_per_day: parseInt(e.target.value) }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Days per Week\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={scheduleConfig.days_per_week}\n                    onChange={(e) => setScheduleConfig(prev => ({ ...prev, days_per_week: parseInt(e.target.value) }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Efficiency Factor\n                  </label>\n                  <input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={scheduleConfig.efficiency_factor}\n                    onChange={(e) => setScheduleConfig(prev => ({ ...prev, efficiency_factor: parseFloat(e.target.value) }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end space-x-3 mt-6\">\n                <button\n                  onClick={() => setShowConfigModal(false)}\n                  className=\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-sy-black-700 hover:bg-gray-50\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={() => {\n                    // Save configuration logic here\n                    setShowConfigModal(false);\n                  }}\n                  className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sy-green-600 hover:bg-sy-green-700\"\n                >\n                  Save\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Line Configuration Modal */}\n      {showLineConfigModal && selectedLineForConfig && editingLineConfig && (\n        <div \n          className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\"\n          onClick={() => {\n            setShowLineConfigModal(false);\n            setSelectedLineForConfig(null);\n            setEditingLineConfig(null);\n          }}\n        >\n          <div \n            className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"mt-3\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-sy-black-900\">\n                  Configure {selectedLineForConfig.line_name}\n                </h3>\n                <button\n                  onClick={() => {\n                    setShowLineConfigModal(false);\n                    setSelectedLineForConfig(null);\n                    setEditingLineConfig(null);\n                  }}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Hours per Shift\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={editingLineConfig.hours_per_shift}\n                    onChange={(e) => setEditingLineConfig(prev => ({ ...prev!, hours_per_shift: parseInt(e.target.value) }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Shifts per Day\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={editingLineConfig.shifts_per_day}\n                    onChange={(e) => setEditingLineConfig(prev => ({ ...prev!, shifts_per_day: parseInt(e.target.value) }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Days per Week\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={editingLineConfig.days_per_week}\n                    onChange={(e) => setEditingLineConfig(prev => ({ ...prev!, days_per_week: parseInt(e.target.value) }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Time Multiplier\n                  </label>\n                  <input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={editingLineConfig.time_multiplier}\n                    onChange={(e) => setEditingLineConfig(prev => ({ ...prev!, time_multiplier: parseFloat(e.target.value) }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Start Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={editingLineConfig.start_time}\n                    onChange={(e) => setEditingLineConfig(prev => ({ ...prev!, start_time: e.target.value }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    End Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={editingLineConfig.end_time}\n                    onChange={(e) => setEditingLineConfig(prev => ({ ...prev!, end_time: e.target.value }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Lunch Break Duration (minutes)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={editingLineConfig.lunch_break_duration}\n                    onChange={(e) => setEditingLineConfig(prev => ({ ...prev!, lunch_break_duration: parseInt(e.target.value) }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Lunch Break Start Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={editingLineConfig.lunch_break_start}\n                    onChange={(e) => setEditingLineConfig(prev => ({ ...prev!, lunch_break_start: e.target.value }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-sy-black-700 mb-2\">\n                    Break Duration (minutes)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={editingLineConfig.break_duration}\n                    onChange={(e) => setEditingLineConfig(prev => ({ ...prev!, break_duration: parseInt(e.target.value) }))}\n                    className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-sy-green-500 focus:border-sy-green-500 sm:text-sm\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end space-x-3 mt-6\">\n                <button\n                  onClick={() => {\n                    setShowLineConfigModal(false);\n                    setSelectedLineForConfig(null);\n                    setEditingLineConfig(null);\n                  }}\n                  className=\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-sy-black-700 hover:bg-gray-50\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={() => updateLineConfig(selectedLineForConfig.id, editingLineConfig)}\n                  className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sy-green-600 hover:bg-sy-green-700\"\n                >\n                  Save Configuration\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Schedule; \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}