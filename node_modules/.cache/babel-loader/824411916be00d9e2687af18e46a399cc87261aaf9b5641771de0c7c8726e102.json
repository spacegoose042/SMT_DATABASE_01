{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useRef}from'react';import{useAuth}from'./AuthContext.tsx';import{io}from'socket.io-client';import{jsx as _jsx}from\"react/jsx-runtime\";const SSEContext=/*#__PURE__*/createContext(undefined);export const SocketProvider=_ref=>{let{children}=_ref;const[connected,setConnected]=useState(false);// SSE connection\nconst[socketConnected,setSocketConnected]=useState(false);// Socket.IO connection\nconst[eventSource,setEventSource]=useState(null);const[socket,setSocket]=useState(null);const[roomUsers,setRoomUsers]=useState([]);const[userCount,setUserCount]=useState(0);const{user}=useAuth();// Use refs to store callbacks to avoid recreating connections\nconst workOrderCallbacksRef=useRef([]);const generalCallbacksRef=useRef([]);const userJoinedCallbacksRef=useRef([]);const userLeftCallbacksRef=useRef([]);const timelineInteractionCallbacksRef=useRef([]);// SSE Connection Setup\nuseEffect(()=>{const token=localStorage.getItem('auth_token');if(!token){console.log('❌ No auth token available for SSE');return;}const isDev=process.env.NODE_ENV==='development';// Always use production URL for SSE since we're running local dev against production\nconst baseUrl=isDev?'https://smtdatabase01-production.up.railway.app':window.location.origin;// Include token in URL since EventSource doesn't support custom headers\nconst eventSourceUrl=`${baseUrl}/api/events?token=${encodeURIComponent(token)}`;console.log('Connecting to SSE server:',eventSourceUrl);// Create EventSource connection\nconst newEventSource=new EventSource(eventSourceUrl);newEventSource.onopen=()=>{console.log('✅ Connected to SSE server');setConnected(true);};newEventSource.onmessage=event=>{try{const data=JSON.parse(event.data);console.log('📡 Received SSE update:',data);// Route the update to appropriate callbacks\nif(data.type==='work_order_update'){workOrderCallbacksRef.current.forEach(callback=>{try{callback(data);}catch(error){console.error('Error in work order callback:',error);}});}else{// General update - send to all general callbacks\ngeneralCallbacksRef.current.forEach(callback=>{try{callback(data);}catch(error){console.error('Error in general callback:',error);}});}}catch(error){console.error('Error parsing SSE message:',error);}};newEventSource.onerror=error=>{console.error('❌ SSE connection error:',error);setConnected(false);};setEventSource(newEventSource);// Cleanup on unmount\nreturn()=>{console.log('🔌 Closing SSE connection');newEventSource.close();setConnected(false);};},[user]);// Depend on user to reconnect when auth changes\n// Socket.IO Connection Setup with Phase 3 Features\nuseEffect(()=>{const token=localStorage.getItem('auth_token');if(!token){console.log('❌ No auth token available for Socket.IO');return;}const isDev=process.env.NODE_ENV==='development';const baseUrl=isDev?'https://smtdatabase01-production.up.railway.app':window.location.origin;console.log('🔌 Connecting to Socket.IO server:',baseUrl);// Create Socket.IO connection with auth\nconst newSocket=io(baseUrl,{auth:{token:token}});newSocket.on('connect',()=>{console.log('✅ Connected to Socket.IO server');setSocketConnected(true);});newSocket.on('disconnect',()=>{console.log('❌ Disconnected from Socket.IO server');setSocketConnected(false);setRoomUsers([]);setUserCount(0);});newSocket.on('connected',data=>{console.log('🔗 Socket.IO handshake:',data);});newSocket.on('work_order_update',data=>{console.log('🚀 Received Socket.IO work order update:',data);// Route to work order callbacks (same as SSE)\nworkOrderCallbacksRef.current.forEach(callback=>{try{callback(data);}catch(error){console.error('Error in Socket.IO work order callback:',error);}});});// Phase 3: User presence events\nnewSocket.on('room_joined',data=>{console.log('🏠 Room joined:',data);if(data.users_in_room){setRoomUsers(data.users_in_room);setUserCount(data.user_count);}});newSocket.on('user_joined_room',data=>{console.log('👋 User joined room:',data);setUserCount(data.user_count);userJoinedCallbacksRef.current.forEach(callback=>{try{callback(data);}catch(error){console.error('Error in user joined callback:',error);}});});newSocket.on('user_left_room',data=>{console.log('👋 User left room:',data);setUserCount(data.user_count);userLeftCallbacksRef.current.forEach(callback=>{try{callback(data);}catch(error){console.error('Error in user left callback:',error);}});});newSocket.on('room_users_update',data=>{console.log('👥 Room users update:',data);setRoomUsers(data.users);setUserCount(data.user_count);});// Timeline interaction events\nnewSocket.on('timeline_work_order_selected',data=>{console.log('🎯 Timeline work order selected:',data);timelineInteractionCallbacksRef.current.forEach(callback=>{try{callback(data);}catch(error){console.error('Error in timeline interaction callback:',error);}});});newSocket.on('timeline_status_change_start',data=>{console.log('🔄 Timeline status change start:',data);timelineInteractionCallbacksRef.current.forEach(callback=>{try{callback(data);}catch(error){console.error('Error in timeline interaction callback:',error);}});});newSocket.on('error',error=>{console.error('❌ Socket.IO error:',error);});setSocket(newSocket);// Cleanup on unmount\nreturn()=>{console.log('🔌 Closing Socket.IO connection');newSocket.disconnect();setSocketConnected(false);setRoomUsers([]);setUserCount(0);};},[user]);const onWorkOrderUpdate=callback=>{workOrderCallbacksRef.current.push(callback);// Return cleanup function\nreturn()=>{workOrderCallbacksRef.current=workOrderCallbacksRef.current.filter(cb=>cb!==callback);};};const onGeneralUpdate=callback=>{generalCallbacksRef.current.push(callback);// Return cleanup function\nreturn()=>{generalCallbacksRef.current=generalCallbacksRef.current.filter(cb=>cb!==callback);};};const onUserJoinedRoom=callback=>{userJoinedCallbacksRef.current.push(callback);return()=>{userJoinedCallbacksRef.current=userJoinedCallbacksRef.current.filter(cb=>cb!==callback);};};const onUserLeftRoom=callback=>{userLeftCallbacksRef.current.push(callback);return()=>{userLeftCallbacksRef.current=userLeftCallbacksRef.current.filter(cb=>cb!==callback);};};const onTimelineInteraction=callback=>{timelineInteractionCallbacksRef.current.push(callback);return()=>{timelineInteractionCallbacksRef.current=timelineInteractionCallbacksRef.current.filter(cb=>cb!==callback);};};const joinRooms=rooms=>{if(socket&&socketConnected){rooms.forEach(room=>{console.log(`🏠 Joining Socket.IO room: ${room}`);socket.emit('join_room',{room});});}else{console.log('⚠️ Socket.IO not connected, cannot join rooms');}};const sendTimelineInteraction=(type,workOrderId,workOrderNumber)=>{if(socket&&socketConnected){socket.emit('timeline_interaction',{type,work_order_id:workOrderId,work_order_number:workOrderNumber});}};const getRoomUsers=room=>{if(socket&&socketConnected){socket.emit('get_room_users',{room});}};const emit=(event,data)=>{if(socket&&socketConnected){socket.emit(event,data);}};return/*#__PURE__*/_jsx(SSEContext.Provider,{value:{connected,socketConnected,onWorkOrderUpdate,onGeneralUpdate,joinRooms,roomUsers,userCount,onUserJoinedRoom,onUserLeftRoom,onTimelineInteraction,sendTimelineInteraction,getRoomUsers,emit},children:children});};export const useSocket=()=>{const context=useContext(SSEContext);if(context===undefined){throw new Error('useSocket must be used within a SocketProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","useAuth","io","jsx","_jsx","SSEContext","undefined","SocketProvider","_ref","children","connected","setConnected","socketConnected","setSocketConnected","eventSource","setEventSource","socket","setSocket","roomUsers","setRoomUsers","userCount","setUserCount","user","workOrderCallbacksRef","generalCallbacksRef","userJoinedCallbacksRef","userLeftCallbacksRef","timelineInteractionCallbacksRef","token","localStorage","getItem","console","log","isDev","process","env","NODE_ENV","baseUrl","window","location","origin","eventSourceUrl","encodeURIComponent","newEventSource","EventSource","onopen","onmessage","event","data","JSON","parse","type","current","forEach","callback","error","onerror","close","newSocket","auth","on","users_in_room","user_count","users","disconnect","onWorkOrderUpdate","push","filter","cb","onGeneralUpdate","onUserJoinedRoom","onUserLeftRoom","onTimelineInteraction","joinRooms","rooms","room","emit","sendTimelineInteraction","workOrderId","workOrderNumber","work_order_id","work_order_number","getRoomUsers","Provider","value","useSocket","context","Error"],"sources":["/Users/mattspacegrey/Documents/GitHub/SMT_DATABASE_01/src/contexts/SocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef, ReactNode } from 'react';\nimport { useAuth } from './AuthContext.tsx';\nimport { io, Socket } from 'socket.io-client';\n\ninterface WorkOrderUpdate {\n  type: 'work_order_update';\n  work_order: {\n    id: string;\n    work_order_number: string;\n    qr_code?: string;\n    customer_name: string;\n    assembly_number: string;\n    line_name?: string;\n    line_number?: number;\n    status: string;\n    quantity?: number;\n    trolley_number?: number;\n  };\n  status_change: {\n    old_status: string;\n    new_status: string;\n    updated_by: string;\n    timestamp: string;\n  };\n  timestamp: string;\n}\n\ninterface RoomUser {\n  user_id: string;\n  username: string;\n  role: string;\n}\n\ninterface UserPresence {\n  user: RoomUser;\n  room: string;\n  user_count: number;\n  timestamp: string;\n}\n\ninterface TimelineInteraction {\n  user: RoomUser;\n  work_order_id: string;\n  work_order_number: string;\n  timestamp: string;\n}\n\ninterface SSEContextType {\n  connected: boolean;\n  socketConnected: boolean;\n  onWorkOrderUpdate: (callback: (update: WorkOrderUpdate) => void) => () => void;\n  onGeneralUpdate: (callback: (data: any) => void) => () => void;\n  joinRooms: (rooms: string[]) => void;\n  // Phase 3 features\n  roomUsers: RoomUser[];\n  userCount: number;\n  onUserJoinedRoom: (callback: (data: UserPresence) => void) => () => void;\n  onUserLeftRoom: (callback: (data: UserPresence) => void) => () => void;\n  onTimelineInteraction: (callback: (data: TimelineInteraction) => void) => () => void;\n  sendTimelineInteraction: (type: string, workOrderId: string, workOrderNumber: string) => void;\n  getRoomUsers: (room: string) => void;\n  emit: (event: string, data: any) => void;\n}\n\nconst SSEContext = createContext<SSEContextType | undefined>(undefined);\n\nexport const SocketProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [connected, setConnected] = useState(false); // SSE connection\n  const [socketConnected, setSocketConnected] = useState(false); // Socket.IO connection\n  const [eventSource, setEventSource] = useState<EventSource | null>(null);\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [roomUsers, setRoomUsers] = useState<RoomUser[]>([]);\n  const [userCount, setUserCount] = useState(0);\n  const { user } = useAuth();\n  \n  // Use refs to store callbacks to avoid recreating connections\n  const workOrderCallbacksRef = useRef<((update: WorkOrderUpdate) => void)[]>([]);\n  const generalCallbacksRef = useRef<((data: any) => void)[]>([]);\n  const userJoinedCallbacksRef = useRef<((data: UserPresence) => void)[]>([]);\n  const userLeftCallbacksRef = useRef<((data: UserPresence) => void)[]>([]);\n  const timelineInteractionCallbacksRef = useRef<((data: TimelineInteraction) => void)[]>([]);\n\n  // SSE Connection Setup\n  useEffect(() => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      console.log('❌ No auth token available for SSE');\n      return;\n    }\n\n    const isDev = process.env.NODE_ENV === 'development';\n    \n    // Always use production URL for SSE since we're running local dev against production\n    const baseUrl = isDev \n      ? 'https://smtdatabase01-production.up.railway.app'\n      : window.location.origin;\n\n    // Include token in URL since EventSource doesn't support custom headers\n    const eventSourceUrl = `${baseUrl}/api/events?token=${encodeURIComponent(token)}`;\n    console.log('Connecting to SSE server:', eventSourceUrl);\n\n    // Create EventSource connection\n    const newEventSource = new EventSource(eventSourceUrl);\n    \n    newEventSource.onopen = () => {\n      console.log('✅ Connected to SSE server');\n      setConnected(true);\n    };\n\n    newEventSource.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('📡 Received SSE update:', data);\n\n        // Route the update to appropriate callbacks\n        if (data.type === 'work_order_update') {\n          workOrderCallbacksRef.current.forEach(callback => {\n            try {\n              callback(data);\n            } catch (error) {\n              console.error('Error in work order callback:', error);\n            }\n          });\n        } else {\n          // General update - send to all general callbacks\n          generalCallbacksRef.current.forEach(callback => {\n            try {\n              callback(data);\n            } catch (error) {\n              console.error('Error in general callback:', error);\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error parsing SSE message:', error);\n      }\n    };\n\n    newEventSource.onerror = (error) => {\n      console.error('❌ SSE connection error:', error);\n      setConnected(false);\n    };\n\n    setEventSource(newEventSource);\n\n    // Cleanup on unmount\n    return () => {\n      console.log('🔌 Closing SSE connection');\n      newEventSource.close();\n      setConnected(false);\n    };\n  }, [user]); // Depend on user to reconnect when auth changes\n\n  // Socket.IO Connection Setup with Phase 3 Features\n  useEffect(() => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      console.log('❌ No auth token available for Socket.IO');\n      return;\n    }\n\n    const isDev = process.env.NODE_ENV === 'development';\n    const baseUrl = isDev \n      ? 'https://smtdatabase01-production.up.railway.app'\n      : window.location.origin;\n\n    console.log('🔌 Connecting to Socket.IO server:', baseUrl);\n\n    // Create Socket.IO connection with auth\n    const newSocket = io(baseUrl, {\n      auth: {\n        token: token\n      }\n    });\n\n    newSocket.on('connect', () => {\n      console.log('✅ Connected to Socket.IO server');\n      setSocketConnected(true);\n    });\n\n    newSocket.on('disconnect', () => {\n      console.log('❌ Disconnected from Socket.IO server');\n      setSocketConnected(false);\n      setRoomUsers([]);\n      setUserCount(0);\n    });\n\n    newSocket.on('connected', (data) => {\n      console.log('🔗 Socket.IO handshake:', data);\n    });\n\n    newSocket.on('work_order_update', (data) => {\n      console.log('🚀 Received Socket.IO work order update:', data);\n      \n      // Route to work order callbacks (same as SSE)\n      workOrderCallbacksRef.current.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in Socket.IO work order callback:', error);\n        }\n      });\n    });\n\n    // Phase 3: User presence events\n    newSocket.on('room_joined', (data) => {\n      console.log('🏠 Room joined:', data);\n      if (data.users_in_room) {\n        setRoomUsers(data.users_in_room);\n        setUserCount(data.user_count);\n      }\n    });\n\n    newSocket.on('user_joined_room', (data) => {\n      console.log('👋 User joined room:', data);\n      setUserCount(data.user_count);\n      \n      userJoinedCallbacksRef.current.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in user joined callback:', error);\n        }\n      });\n    });\n\n    newSocket.on('user_left_room', (data) => {\n      console.log('👋 User left room:', data);\n      setUserCount(data.user_count);\n      \n      userLeftCallbacksRef.current.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in user left callback:', error);\n        }\n      });\n    });\n\n    newSocket.on('room_users_update', (data) => {\n      console.log('👥 Room users update:', data);\n      setRoomUsers(data.users);\n      setUserCount(data.user_count);\n    });\n\n    // Timeline interaction events\n    newSocket.on('timeline_work_order_selected', (data) => {\n      console.log('🎯 Timeline work order selected:', data);\n      \n      timelineInteractionCallbacksRef.current.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in timeline interaction callback:', error);\n        }\n      });\n    });\n\n    newSocket.on('timeline_status_change_start', (data) => {\n      console.log('🔄 Timeline status change start:', data);\n      \n      timelineInteractionCallbacksRef.current.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in timeline interaction callback:', error);\n        }\n      });\n    });\n\n    newSocket.on('error', (error) => {\n      console.error('❌ Socket.IO error:', error);\n    });\n\n    setSocket(newSocket);\n\n    // Cleanup on unmount\n    return () => {\n      console.log('🔌 Closing Socket.IO connection');\n      newSocket.disconnect();\n      setSocketConnected(false);\n      setRoomUsers([]);\n      setUserCount(0);\n    };\n  }, [user]);\n\n  const onWorkOrderUpdate = (callback: (update: WorkOrderUpdate) => void) => {\n    workOrderCallbacksRef.current.push(callback);\n    \n    // Return cleanup function\n    return () => {\n      workOrderCallbacksRef.current = workOrderCallbacksRef.current.filter(cb => cb !== callback);\n    };\n  };\n\n  const onGeneralUpdate = (callback: (data: any) => void) => {\n    generalCallbacksRef.current.push(callback);\n    \n    // Return cleanup function\n    return () => {\n      generalCallbacksRef.current = generalCallbacksRef.current.filter(cb => cb !== callback);\n    };\n  };\n\n  const onUserJoinedRoom = (callback: (data: UserPresence) => void) => {\n    userJoinedCallbacksRef.current.push(callback);\n    \n    return () => {\n      userJoinedCallbacksRef.current = userJoinedCallbacksRef.current.filter(cb => cb !== callback);\n    };\n  };\n\n  const onUserLeftRoom = (callback: (data: UserPresence) => void) => {\n    userLeftCallbacksRef.current.push(callback);\n    \n    return () => {\n      userLeftCallbacksRef.current = userLeftCallbacksRef.current.filter(cb => cb !== callback);\n    };\n  };\n\n  const onTimelineInteraction = (callback: (data: TimelineInteraction) => void) => {\n    timelineInteractionCallbacksRef.current.push(callback);\n    \n    return () => {\n      timelineInteractionCallbacksRef.current = timelineInteractionCallbacksRef.current.filter(cb => cb !== callback);\n    };\n  };\n\n  const joinRooms = (rooms: string[]) => {\n    if (socket && socketConnected) {\n      rooms.forEach(room => {\n        console.log(`🏠 Joining Socket.IO room: ${room}`);\n        socket.emit('join_room', { room });\n      });\n    } else {\n      console.log('⚠️ Socket.IO not connected, cannot join rooms');\n    }\n  };\n\n  const sendTimelineInteraction = (type: string, workOrderId: string, workOrderNumber: string) => {\n    if (socket && socketConnected) {\n      socket.emit('timeline_interaction', {\n        type,\n        work_order_id: workOrderId,\n        work_order_number: workOrderNumber\n      });\n    }\n  };\n\n  const getRoomUsers = (room: string) => {\n    if (socket && socketConnected) {\n      socket.emit('get_room_users', { room });\n    }\n  };\n\n  const emit = (event: string, data: any) => {\n    if (socket && socketConnected) {\n      socket.emit(event, data);\n    }\n  };\n\n  return (\n    <SSEContext.Provider value={{\n      connected,\n      socketConnected,\n      onWorkOrderUpdate,\n      onGeneralUpdate,\n      joinRooms,\n      roomUsers,\n      userCount,\n      onUserJoinedRoom,\n      onUserLeftRoom,\n      onTimelineInteraction,\n      sendTimelineInteraction,\n      getRoomUsers,\n      emit\n    }}>\n      {children}\n    </SSEContext.Provider>\n  );\n};\n\nexport const useSocket = () => {\n  const context = useContext(SSEContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}