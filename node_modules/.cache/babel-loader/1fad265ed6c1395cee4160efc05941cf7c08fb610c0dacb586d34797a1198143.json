{"ast":null,"code":"var _jsxFileName = \"/Users/mattspacegrey/Documents/GitHub/SMT_DATABASE_01/src/contexts/SocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SSEContext = /*#__PURE__*/createContext(undefined);\nexport function SocketProvider({\n  children\n}) {\n  _s();\n  const [connected, setConnected] = useState(false);\n  const [eventSource, setEventSource] = useState(null);\n  const [workOrderCallbacks, setWorkOrderCallbacks] = useState([]);\n  const [generalCallbacks, setGeneralCallbacks] = useState([]);\n  useEffect(() => {\n    // Get auth token from local storage or auth context\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      console.log('No auth token found, skipping SSE connection');\n      return;\n    }\n\n    // Determine the SSE URL based on environment\n    const isDev = process.env.NODE_ENV === 'development';\n    const baseUrl = isDev ? 'https://smtdatabase01-production.up.railway.app' : window.location.origin;\n\n    // Include token in URL since EventSource doesn't support custom headers\n    const eventSourceUrl = `${baseUrl}/api/events?token=${encodeURIComponent(token)}`;\n    console.log('Connecting to SSE server:', eventSourceUrl);\n\n    // Create EventSource connection\n    const newEventSource = new EventSource(eventSourceUrl);\n    newEventSource.onopen = () => {\n      console.log('✅ Connected to SSE server');\n      setConnected(true);\n    };\n    newEventSource.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('📡 Received SSE update:', data);\n        if (data.type === 'status_update') {\n          // Notify all work order update callbacks\n          workOrderCallbacks.forEach(callback => callback(data));\n        } else if (data.type === 'connected') {\n          console.log('Server connection confirmed:', data.message);\n        } else if (data.type === 'heartbeat') {\n          console.log('💓 SSE heartbeat received');\n        } else {\n          // Notify general update callbacks\n          generalCallbacks.forEach(callback => callback(data));\n        }\n      } catch (error) {\n        console.error('Error parsing SSE message:', error);\n      }\n    };\n    newEventSource.onerror = error => {\n      console.error('❌ SSE connection error:', error);\n      setConnected(false);\n    };\n    setEventSource(newEventSource);\n\n    // Cleanup on unmount\n    return () => {\n      console.log('🔌 Closing SSE connection');\n      newEventSource.close();\n      setConnected(false);\n    };\n  }, [workOrderCallbacks, generalCallbacks]);\n  const onWorkOrderUpdate = callback => {\n    setWorkOrderCallbacks(prev => [...prev, callback]);\n\n    // Return cleanup function\n    return () => {\n      setWorkOrderCallbacks(prev => prev.filter(cb => cb !== callback));\n    };\n  };\n  const onGeneralUpdate = callback => {\n    setGeneralCallbacks(prev => [...prev, callback]);\n\n    // Return cleanup function\n    return () => {\n      setGeneralCallbacks(prev => prev.filter(cb => cb !== callback));\n    };\n  };\n  const contextValue = {\n    connected,\n    onWorkOrderUpdate,\n    onGeneralUpdate\n  };\n  return /*#__PURE__*/_jsxDEV(SSEContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(SocketProvider, \"6vbk4jRvd60+Rl1RPljQqTkDjU0=\");\n_c = SocketProvider;\nexport function useSocket() {\n  _s2();\n  const context = useContext(SSEContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n}\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","SSEContext","undefined","SocketProvider","children","_s","connected","setConnected","eventSource","setEventSource","workOrderCallbacks","setWorkOrderCallbacks","generalCallbacks","setGeneralCallbacks","token","localStorage","getItem","console","log","isDev","process","env","NODE_ENV","baseUrl","window","location","origin","eventSourceUrl","encodeURIComponent","newEventSource","EventSource","onopen","onmessage","event","data","JSON","parse","type","forEach","callback","message","error","onerror","close","onWorkOrderUpdate","prev","filter","cb","onGeneralUpdate","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Users/mattspacegrey/Documents/GitHub/SMT_DATABASE_01/src/contexts/SocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ninterface WorkOrderUpdate {\n  type: 'status_update';\n  work_order: {\n    id: string;\n    work_order_number: string;\n    qr_code?: string;\n    customer_name: string;\n    assembly_number: string;\n    line_name?: string;\n    line_number?: number;\n    status: string;\n    quantity?: number;\n    trolley_number?: number;\n  };\n  status_change: {\n    old_status: string;\n    new_status: string;\n    updated_by: string;\n    timestamp: string;\n  };\n  timestamp: string;\n}\n\ninterface GeneralUpdate {\n  type: string;\n  data: any;\n  timestamp: string;\n}\n\ninterface SSEContextType {\n  connected: boolean;\n  onWorkOrderUpdate: (callback: (update: WorkOrderUpdate) => void) => () => void;\n  onGeneralUpdate: (callback: (update: GeneralUpdate) => void) => () => void;\n}\n\nconst SSEContext = createContext<SSEContextType | undefined>(undefined);\n\ninterface SSEProviderProps {\n  children: ReactNode;\n}\n\nexport function SocketProvider({ children }: SSEProviderProps) {\n  const [connected, setConnected] = useState(false);\n  const [eventSource, setEventSource] = useState<EventSource | null>(null);\n  const [workOrderCallbacks, setWorkOrderCallbacks] = useState<Array<(update: WorkOrderUpdate) => void>>([]);\n  const [generalCallbacks, setGeneralCallbacks] = useState<Array<(update: GeneralUpdate) => void>>([]);\n\n  useEffect(() => {\n    // Get auth token from local storage or auth context\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      console.log('No auth token found, skipping SSE connection');\n      return;\n    }\n\n    // Determine the SSE URL based on environment\n    const isDev = process.env.NODE_ENV === 'development';\n    const baseUrl = isDev \n      ? 'https://smtdatabase01-production.up.railway.app'\n      : window.location.origin;\n\n    // Include token in URL since EventSource doesn't support custom headers\n    const eventSourceUrl = `${baseUrl}/api/events?token=${encodeURIComponent(token)}`;\n    console.log('Connecting to SSE server:', eventSourceUrl);\n\n    // Create EventSource connection\n    const newEventSource = new EventSource(eventSourceUrl);\n    \n    newEventSource.onopen = () => {\n      console.log('✅ Connected to SSE server');\n      setConnected(true);\n    };\n\n    newEventSource.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('📡 Received SSE update:', data);\n\n        if (data.type === 'status_update') {\n          // Notify all work order update callbacks\n          workOrderCallbacks.forEach(callback => callback(data));\n        } else if (data.type === 'connected') {\n          console.log('Server connection confirmed:', data.message);\n        } else if (data.type === 'heartbeat') {\n          console.log('💓 SSE heartbeat received');\n        } else {\n          // Notify general update callbacks\n          generalCallbacks.forEach(callback => callback(data));\n        }\n      } catch (error) {\n        console.error('Error parsing SSE message:', error);\n      }\n    };\n\n    newEventSource.onerror = (error) => {\n      console.error('❌ SSE connection error:', error);\n      setConnected(false);\n    };\n\n    setEventSource(newEventSource);\n\n    // Cleanup on unmount\n    return () => {\n      console.log('🔌 Closing SSE connection');\n      newEventSource.close();\n      setConnected(false);\n    };\n  }, [workOrderCallbacks, generalCallbacks]);\n\n  const onWorkOrderUpdate = (callback: (update: WorkOrderUpdate) => void) => {\n    setWorkOrderCallbacks(prev => [...prev, callback]);\n    \n    // Return cleanup function\n    return () => {\n      setWorkOrderCallbacks(prev => prev.filter(cb => cb !== callback));\n    };\n  };\n\n  const onGeneralUpdate = (callback: (update: GeneralUpdate) => void) => {\n    setGeneralCallbacks(prev => [...prev, callback]);\n    \n    // Return cleanup function\n    return () => {\n      setGeneralCallbacks(prev => prev.filter(cb => cb !== callback));\n    };\n  };\n\n  const contextValue: SSEContextType = {\n    connected,\n    onWorkOrderUpdate,\n    onGeneralUpdate\n  };\n\n  return (\n    <SSEContext.Provider value={contextValue}>\n      {children}\n    </SSEContext.Provider>\n  );\n}\n\nexport function useSocket() {\n  const context = useContext(SSEContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}