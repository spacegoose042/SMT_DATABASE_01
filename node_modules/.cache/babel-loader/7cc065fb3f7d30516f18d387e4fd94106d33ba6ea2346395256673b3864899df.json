{"ast":null,"code":"var _jsxFileName = \"/Users/mattspacegrey/Documents/GitHub/SMT_DATABASE_01/src/contexts/SocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(undefined);\nexport function SocketProvider({\n  children\n}) {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    // Determine the WebSocket URL based on environment\n    const isDev = process.env.NODE_ENV === 'development';\n    const socketUrl = isDev ? 'https://smtdatabase01-production.up.railway.app' // Use Railway for dev too\n    : window.location.origin; // Use same origin in production\n\n    console.log('Connecting to Socket.IO server:', socketUrl);\n\n    // Create socket connection\n    const newSocket = io(socketUrl, {\n      transports: ['websocket', 'polling'],\n      // Fallback to polling if WebSocket fails\n      timeout: 20000,\n      autoConnect: true\n    });\n\n    // Connection event handlers\n    newSocket.on('connect', () => {\n      console.log('✅ Connected to real-time server');\n      setConnected(true);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('❌ Disconnected from real-time server');\n      setConnected(false);\n    });\n    newSocket.on('connected', data => {\n      console.log('Server connection confirmed:', data.message);\n    });\n    newSocket.on('connect_error', error => {\n      console.error('❌ Socket connection error:', error);\n      setConnected(false);\n    });\n    newSocket.on('joined_rooms', data => {\n      console.log('✅ Joined rooms:', data.rooms);\n    });\n    newSocket.on('left_rooms', data => {\n      console.log('👋 Left rooms:', data.rooms);\n    });\n    newSocket.on('error', data => {\n      console.error('Socket error:', data.message);\n    });\n    setSocket(newSocket);\n\n    // Cleanup on unmount\n    return () => {\n      console.log('🔌 Closing socket connection');\n      newSocket.close();\n    };\n  }, []);\n  const joinRooms = rooms => {\n    if (socket && connected) {\n      socket.emit('join_updates', {\n        rooms\n      });\n    }\n  };\n  const leaveRooms = rooms => {\n    if (socket && connected) {\n      socket.emit('leave_updates', {\n        rooms\n      });\n    }\n  };\n  const onWorkOrderUpdate = callback => {\n    if (!socket) return () => {};\n    socket.on('work_order_updated', callback);\n\n    // Return cleanup function\n    return () => {\n      socket.off('work_order_updated', callback);\n    };\n  };\n  const onGeneralUpdate = callback => {\n    if (!socket) return () => {};\n    socket.on('general_update', callback);\n\n    // Return cleanup function\n    return () => {\n      socket.off('general_update', callback);\n    };\n  };\n  const contextValue = {\n    socket,\n    connected,\n    joinRooms,\n    leaveRooms,\n    onWorkOrderUpdate,\n    onGeneralUpdate\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(SocketProvider, \"m6p1sV3rwp2XZjgv4y9FqMzBcks=\");\n_c = SocketProvider;\nexport function useSocket() {\n  _s2();\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n}\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","undefined","SocketProvider","children","_s","socket","setSocket","connected","setConnected","isDev","process","env","NODE_ENV","socketUrl","window","location","origin","console","log","newSocket","transports","timeout","autoConnect","on","data","message","error","rooms","close","joinRooms","emit","leaveRooms","onWorkOrderUpdate","callback","off","onGeneralUpdate","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Users/mattspacegrey/Documents/GitHub/SMT_DATABASE_01/src/contexts/SocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\ninterface WorkOrderUpdate {\n  type: 'status_update';\n  work_order: {\n    id: string;\n    work_order_number: string;\n    qr_code?: string;\n    customer_name: string;\n    assembly_number: string;\n    line_name?: string;\n    line_number?: number;\n    status: string;\n    quantity?: number;\n    trolley_number?: number;\n  };\n  status_change: {\n    old_status: string;\n    new_status: string;\n    updated_by: string;\n    timestamp: string;\n  };\n  timestamp: string;\n}\n\ninterface GeneralUpdate {\n  type: string;\n  data: any;\n  timestamp: string;\n}\n\ninterface SocketContextType {\n  socket: Socket | null;\n  connected: boolean;\n  joinRooms: (rooms: string[]) => void;\n  leaveRooms: (rooms: string[]) => void;\n  onWorkOrderUpdate: (callback: (update: WorkOrderUpdate) => void) => () => void;\n  onGeneralUpdate: (callback: (update: GeneralUpdate) => void) => () => void;\n}\n\nconst SocketContext = createContext<SocketContextType | undefined>(undefined);\n\ninterface SocketProviderProps {\n  children: ReactNode;\n}\n\nexport function SocketProvider({ children }: SocketProviderProps) {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [connected, setConnected] = useState(false);\n\n  useEffect(() => {\n    // Determine the WebSocket URL based on environment\n    const isDev = process.env.NODE_ENV === 'development';\n    const socketUrl = isDev \n      ? 'https://smtdatabase01-production.up.railway.app'  // Use Railway for dev too\n      : window.location.origin; // Use same origin in production\n\n    console.log('Connecting to Socket.IO server:', socketUrl);\n\n    // Create socket connection\n    const newSocket = io(socketUrl, {\n      transports: ['websocket', 'polling'], // Fallback to polling if WebSocket fails\n      timeout: 20000,\n      autoConnect: true\n    });\n\n    // Connection event handlers\n    newSocket.on('connect', () => {\n      console.log('✅ Connected to real-time server');\n      setConnected(true);\n    });\n\n    newSocket.on('disconnect', () => {\n      console.log('❌ Disconnected from real-time server');\n      setConnected(false);\n    });\n\n    newSocket.on('connected', (data) => {\n      console.log('Server connection confirmed:', data.message);\n    });\n\n    newSocket.on('connect_error', (error) => {\n      console.error('❌ Socket connection error:', error);\n      setConnected(false);\n    });\n\n    newSocket.on('joined_rooms', (data) => {\n      console.log('✅ Joined rooms:', data.rooms);\n    });\n\n    newSocket.on('left_rooms', (data) => {\n      console.log('👋 Left rooms:', data.rooms);\n    });\n\n    newSocket.on('error', (data) => {\n      console.error('Socket error:', data.message);\n    });\n\n    setSocket(newSocket);\n\n    // Cleanup on unmount\n    return () => {\n      console.log('🔌 Closing socket connection');\n      newSocket.close();\n    };\n  }, []);\n\n  const joinRooms = (rooms: string[]) => {\n    if (socket && connected) {\n      socket.emit('join_updates', { rooms });\n    }\n  };\n\n  const leaveRooms = (rooms: string[]) => {\n    if (socket && connected) {\n      socket.emit('leave_updates', { rooms });\n    }\n  };\n\n  const onWorkOrderUpdate = (callback: (update: WorkOrderUpdate) => void) => {\n    if (!socket) return () => {};\n\n    socket.on('work_order_updated', callback);\n    \n    // Return cleanup function\n    return () => {\n      socket.off('work_order_updated', callback);\n    };\n  };\n\n  const onGeneralUpdate = (callback: (update: GeneralUpdate) => void) => {\n    if (!socket) return () => {};\n\n    socket.on('general_update', callback);\n    \n    // Return cleanup function\n    return () => {\n      socket.off('general_update', callback);\n    };\n  };\n\n  const contextValue: SocketContextType = {\n    socket,\n    connected,\n    joinRooms,\n    leaveRooms,\n    onWorkOrderUpdate,\n    onGeneralUpdate\n  };\n\n  return (\n    <SocketContext.Provider value={contextValue}>\n      {children}\n    </SocketContext.Provider>\n  );\n}\n\nexport function useSocket() {\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}