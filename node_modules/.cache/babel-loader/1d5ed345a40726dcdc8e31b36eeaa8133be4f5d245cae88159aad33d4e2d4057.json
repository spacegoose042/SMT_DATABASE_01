{"ast":null,"code":"import { debounce, memo, notUndefined, approxEqual } from \"./utils.js\";\nconst getRect = element => {\n  const {\n    offsetWidth,\n    offsetHeight\n  } = element;\n  return {\n    width: offsetWidth,\n    height: offsetHeight\n  };\n};\nconst defaultKeyExtractor = index => index;\nconst defaultRangeExtractor = range => {\n  const start = Math.max(range.startIndex - range.overscan, 0);\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1);\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\nconst observeElementRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  const handler = rect => {\n    const {\n      width,\n      height\n    } = rect;\n    cb({\n      width: Math.round(width),\n      height: Math.round(height)\n    });\n  };\n  handler(getRect(element));\n  if (!targetWindow.ResizeObserver) {\n    return () => {};\n  }\n  const observer = new targetWindow.ResizeObserver(entries => {\n    const run = () => {\n      const entry = entries[0];\n      if (entry == null ? void 0 : entry.borderBoxSize) {\n        const box = entry.borderBoxSize[0];\n        if (box) {\n          handler({\n            width: box.inlineSize,\n            height: box.blockSize\n          });\n          return;\n        }\n      }\n      handler(getRect(element));\n    };\n    instance.options.useAnimationFrameWithResizeObserver ? requestAnimationFrame(run) : run();\n  });\n  observer.observe(element, {\n    box: \"border-box\"\n  });\n  return () => {\n    observer.unobserve(element);\n  };\n};\nconst addEventListenerOptions = {\n  passive: true\n};\nconst observeWindowRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb({\n      width: element.innerWidth,\n      height: element.innerHeight\n    });\n  };\n  handler();\n  element.addEventListener(\"resize\", handler, addEventListenerOptions);\n  return () => {\n    element.removeEventListener(\"resize\", handler);\n  };\n};\nconst supportsScrollend = typeof window == \"undefined\" ? true : \"onscrollend\" in window;\nconst observeElementOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  let offset = 0;\n  const fallback = instance.options.useScrollendEvent && supportsScrollend ? () => void 0 : debounce(targetWindow, () => {\n    cb(offset, false);\n  }, instance.options.isScrollingResetDelay);\n  const createHandler = isScrolling => () => {\n    const {\n      horizontal,\n      isRtl\n    } = instance.options;\n    offset = horizontal ? element[\"scrollLeft\"] * (isRtl && -1 || 1) : element[\"scrollTop\"];\n    fallback();\n    cb(offset, isScrolling);\n  };\n  const handler = createHandler(true);\n  const endHandler = createHandler(false);\n  endHandler();\n  element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n  const registerScrollendEvent = instance.options.useScrollendEvent && supportsScrollend;\n  if (registerScrollendEvent) {\n    element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n  }\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n    if (registerScrollendEvent) {\n      element.removeEventListener(\"scrollend\", endHandler);\n    }\n  };\n};\nconst observeWindowOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const targetWindow = instance.targetWindow;\n  if (!targetWindow) {\n    return;\n  }\n  let offset = 0;\n  const fallback = instance.options.useScrollendEvent && supportsScrollend ? () => void 0 : debounce(targetWindow, () => {\n    cb(offset, false);\n  }, instance.options.isScrollingResetDelay);\n  const createHandler = isScrolling => () => {\n    offset = element[instance.options.horizontal ? \"scrollX\" : \"scrollY\"];\n    fallback();\n    cb(offset, isScrolling);\n  };\n  const handler = createHandler(true);\n  const endHandler = createHandler(false);\n  endHandler();\n  element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n  const registerScrollendEvent = instance.options.useScrollendEvent && supportsScrollend;\n  if (registerScrollendEvent) {\n    element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n  }\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n    if (registerScrollendEvent) {\n      element.removeEventListener(\"scrollend\", endHandler);\n    }\n  };\n};\nconst measureElement = (element, entry, instance) => {\n  if (entry == null ? void 0 : entry.borderBoxSize) {\n    const box = entry.borderBoxSize[0];\n    if (box) {\n      const size = Math.round(box[instance.options.horizontal ? \"inlineSize\" : \"blockSize\"]);\n      return size;\n    }\n  }\n  return element[instance.options.horizontal ? \"offsetWidth\" : \"offsetHeight\"];\n};\nconst windowScroll = (offset, _ref, instance) => {\n  let {\n    adjustments = 0,\n    behavior\n  } = _ref;\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nconst elementScroll = (offset, _ref2, instance) => {\n  let {\n    adjustments = 0,\n    behavior\n  } = _ref2;\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nclass Virtualizer {\n  constructor(opts) {\n    var _this = this;\n    this.unsubs = [];\n    this.scrollElement = null;\n    this.targetWindow = null;\n    this.isScrolling = false;\n    this.measurementsCache = [];\n    this.itemSizeCache = /* @__PURE__ */new Map();\n    this.pendingMeasuredCacheIndexes = [];\n    this.scrollRect = null;\n    this.scrollOffset = null;\n    this.scrollDirection = null;\n    this.scrollAdjustments = 0;\n    this.elementsCache = /* @__PURE__ */new Map();\n    this.observer = /* @__PURE__ */(() => {\n      let _ro = null;\n      const get = () => {\n        if (_ro) {\n          return _ro;\n        }\n        if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n          return null;\n        }\n        return _ro = new this.targetWindow.ResizeObserver(entries => {\n          entries.forEach(entry => {\n            const run = () => {\n              this._measureElement(entry.target, entry);\n            };\n            this.options.useAnimationFrameWithResizeObserver ? requestAnimationFrame(run) : run();\n          });\n        });\n      };\n      return {\n        disconnect: () => {\n          var _a;\n          (_a = get()) == null ? void 0 : _a.disconnect();\n          _ro = null;\n        },\n        observe: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.observe(target, {\n            box: \"border-box\"\n          });\n        },\n        unobserve: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.unobserve(target);\n        }\n      };\n    })();\n    this.range = null;\n    this.setOptions = opts2 => {\n      Object.entries(opts2).forEach(_ref3 => {\n        let [key, value] = _ref3;\n        if (typeof value === \"undefined\") delete opts2[key];\n      });\n      this.options = {\n        debug: false,\n        initialOffset: 0,\n        overscan: 1,\n        paddingStart: 0,\n        paddingEnd: 0,\n        scrollPaddingStart: 0,\n        scrollPaddingEnd: 0,\n        horizontal: false,\n        getItemKey: defaultKeyExtractor,\n        rangeExtractor: defaultRangeExtractor,\n        onChange: () => {},\n        measureElement,\n        initialRect: {\n          width: 0,\n          height: 0\n        },\n        scrollMargin: 0,\n        gap: 0,\n        indexAttribute: \"data-index\",\n        initialMeasurementsCache: [],\n        lanes: 1,\n        isScrollingResetDelay: 150,\n        enabled: true,\n        isRtl: false,\n        useScrollendEvent: false,\n        useAnimationFrameWithResizeObserver: false,\n        ...opts2\n      };\n    };\n    this.notify = sync => {\n      var _a, _b;\n      (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, sync);\n    };\n    this.maybeNotify = memo(() => {\n      this.calculateRange();\n      return [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null];\n    }, isScrolling => {\n      this.notify(isScrolling);\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"maybeNotify\",\n      debug: () => this.options.debug,\n      initialDeps: [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null]\n    });\n    this.cleanup = () => {\n      this.unsubs.filter(Boolean).forEach(d => d());\n      this.unsubs = [];\n      this.observer.disconnect();\n      this.scrollElement = null;\n      this.targetWindow = null;\n    };\n    this._didMount = () => {\n      return () => {\n        this.cleanup();\n      };\n    };\n    this._willUpdate = () => {\n      var _a;\n      const scrollElement = this.options.enabled ? this.options.getScrollElement() : null;\n      if (this.scrollElement !== scrollElement) {\n        this.cleanup();\n        if (!scrollElement) {\n          this.maybeNotify();\n          return;\n        }\n        this.scrollElement = scrollElement;\n        if (this.scrollElement && \"ownerDocument\" in this.scrollElement) {\n          this.targetWindow = this.scrollElement.ownerDocument.defaultView;\n        } else {\n          this.targetWindow = ((_a = this.scrollElement) == null ? void 0 : _a.window) ?? null;\n        }\n        this.elementsCache.forEach(cached => {\n          this.observer.observe(cached);\n        });\n        this._scrollToOffset(this.getScrollOffset(), {\n          adjustments: void 0,\n          behavior: void 0\n        });\n        this.unsubs.push(this.options.observeElementRect(this, rect => {\n          this.scrollRect = rect;\n          this.maybeNotify();\n        }));\n        this.unsubs.push(this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0;\n          this.scrollDirection = isScrolling ? this.getScrollOffset() < offset ? \"forward\" : \"backward\" : null;\n          this.scrollOffset = offset;\n          this.isScrolling = isScrolling;\n          this.maybeNotify();\n        }));\n      }\n    };\n    this.getSize = () => {\n      if (!this.options.enabled) {\n        this.scrollRect = null;\n        return 0;\n      }\n      this.scrollRect = this.scrollRect ?? this.options.initialRect;\n      return this.scrollRect[this.options.horizontal ? \"width\" : \"height\"];\n    };\n    this.getScrollOffset = () => {\n      if (!this.options.enabled) {\n        this.scrollOffset = null;\n        return 0;\n      }\n      this.scrollOffset = this.scrollOffset ?? (typeof this.options.initialOffset === \"function\" ? this.options.initialOffset() : this.options.initialOffset);\n      return this.scrollOffset;\n    };\n    this.getFurthestMeasurement = (measurements, index) => {\n      const furthestMeasurementsFound = /* @__PURE__ */new Map();\n      const furthestMeasurements = /* @__PURE__ */new Map();\n      for (let m = index - 1; m >= 0; m--) {\n        const measurement = measurements[m];\n        if (furthestMeasurementsFound.has(measurement.lane)) {\n          continue;\n        }\n        const previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n        if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n          furthestMeasurements.set(measurement.lane, measurement);\n        } else if (measurement.end < previousFurthestMeasurement.end) {\n          furthestMeasurementsFound.set(measurement.lane, true);\n        }\n        if (furthestMeasurementsFound.size === this.options.lanes) {\n          break;\n        }\n      }\n      return furthestMeasurements.size === this.options.lanes ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n        if (a.end === b.end) {\n          return a.index - b.index;\n        }\n        return a.end - b.end;\n      })[0] : void 0;\n    };\n    this.getMeasurementOptions = memo(() => [this.options.count, this.options.paddingStart, this.options.scrollMargin, this.options.getItemKey, this.options.enabled], (count, paddingStart, scrollMargin, getItemKey, enabled) => {\n      this.pendingMeasuredCacheIndexes = [];\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled\n      };\n    }, {\n      key: false\n    });\n    this.getMeasurements = memo(() => [this.getMeasurementOptions(), this.itemSizeCache], (_ref4, itemSizeCache) => {\n      let {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled\n      } = _ref4;\n      if (!enabled) {\n        this.measurementsCache = [];\n        this.itemSizeCache.clear();\n        return [];\n      }\n      if (this.measurementsCache.length === 0) {\n        this.measurementsCache = this.options.initialMeasurementsCache;\n        this.measurementsCache.forEach(item => {\n          this.itemSizeCache.set(item.key, item.size);\n        });\n      }\n      const min = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;\n      this.pendingMeasuredCacheIndexes = [];\n      const measurements = this.measurementsCache.slice(0, min);\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i);\n        const furthestMeasurement = this.options.lanes === 1 ? measurements[i - 1] : this.getFurthestMeasurement(measurements, i);\n        const start = furthestMeasurement ? furthestMeasurement.end + this.options.gap : paddingStart + scrollMargin;\n        const measuredSize = itemSizeCache.get(key);\n        const size = typeof measuredSize === \"number\" ? measuredSize : this.options.estimateSize(i);\n        const end = start + size;\n        const lane = furthestMeasurement ? furthestMeasurement.lane : i % this.options.lanes;\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane\n        };\n      }\n      this.measurementsCache = measurements;\n      return measurements;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getMeasurements\",\n      debug: () => this.options.debug\n    });\n    this.calculateRange = memo(() => [this.getMeasurements(), this.getSize(), this.getScrollOffset(), this.options.lanes], (measurements, outerSize, scrollOffset, lanes) => {\n      return this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n        lanes\n      }) : null;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"calculateRange\",\n      debug: () => this.options.debug\n    });\n    this.getVirtualIndexes = memo(() => {\n      let startIndex = null;\n      let endIndex = null;\n      const range = this.calculateRange();\n      if (range) {\n        startIndex = range.startIndex;\n        endIndex = range.endIndex;\n      }\n      this.maybeNotify.updateDeps([this.isScrolling, startIndex, endIndex]);\n      return [this.options.rangeExtractor, this.options.overscan, this.options.count, startIndex, endIndex];\n    }, (rangeExtractor, overscan, count, startIndex, endIndex) => {\n      return startIndex === null || endIndex === null ? [] : rangeExtractor({\n        startIndex,\n        endIndex,\n        overscan,\n        count\n      });\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getVirtualIndexes\",\n      debug: () => this.options.debug\n    });\n    this.indexFromElement = node => {\n      const attributeName = this.options.indexAttribute;\n      const indexStr = node.getAttribute(attributeName);\n      if (!indexStr) {\n        console.warn(`Missing attribute name '${attributeName}={index}' on measured element.`);\n        return -1;\n      }\n      return parseInt(indexStr, 10);\n    };\n    this._measureElement = (node, entry) => {\n      const index = this.indexFromElement(node);\n      const item = this.measurementsCache[index];\n      if (!item) {\n        return;\n      }\n      const key = item.key;\n      const prevNode = this.elementsCache.get(key);\n      if (prevNode !== node) {\n        if (prevNode) {\n          this.observer.unobserve(prevNode);\n        }\n        this.observer.observe(node);\n        this.elementsCache.set(key, node);\n      }\n      if (node.isConnected) {\n        this.resizeItem(index, this.options.measureElement(node, entry, this));\n      }\n    };\n    this.resizeItem = (index, size) => {\n      const item = this.measurementsCache[index];\n      if (!item) {\n        return;\n      }\n      const itemSize = this.itemSizeCache.get(item.key) ?? item.size;\n      const delta = size - itemSize;\n      if (delta !== 0) {\n        if (this.shouldAdjustScrollPositionOnItemSizeChange !== void 0 ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this) : item.start < this.getScrollOffset() + this.scrollAdjustments) {\n          if (process.env.NODE_ENV !== \"production\" && this.options.debug) {\n            console.info(\"correction\", delta);\n          }\n          this._scrollToOffset(this.getScrollOffset(), {\n            adjustments: this.scrollAdjustments += delta,\n            behavior: void 0\n          });\n        }\n        this.pendingMeasuredCacheIndexes.push(item.index);\n        this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size));\n        this.notify(false);\n      }\n    };\n    this.measureElement = node => {\n      if (!node) {\n        this.elementsCache.forEach((cached, key) => {\n          if (!cached.isConnected) {\n            this.observer.unobserve(cached);\n            this.elementsCache.delete(key);\n          }\n        });\n        return;\n      }\n      this._measureElement(node, void 0);\n    };\n    this.getVirtualItems = memo(() => [this.getVirtualIndexes(), this.getMeasurements()], (indexes, measurements) => {\n      const virtualItems = [];\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k];\n        const measurement = measurements[i];\n        virtualItems.push(measurement);\n      }\n      return virtualItems;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getVirtualItems\",\n      debug: () => this.options.debug\n    });\n    this.getVirtualItemForOffset = offset => {\n      const measurements = this.getMeasurements();\n      if (measurements.length === 0) {\n        return void 0;\n      }\n      return notUndefined(measurements[findNearestBinarySearch(0, measurements.length - 1, index => notUndefined(measurements[index]).start, offset)]);\n    };\n    this.getOffsetForAlignment = function (toOffset, align) {\n      let itemSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      const size = _this.getSize();\n      const scrollOffset = _this.getScrollOffset();\n      if (align === \"auto\") {\n        align = toOffset >= scrollOffset + size ? \"end\" : \"start\";\n      }\n      if (align === \"center\") {\n        toOffset += (itemSize - size) / 2;\n      } else if (align === \"end\") {\n        toOffset -= size;\n      }\n      const maxOffset = _this.getTotalSize() + _this.options.scrollMargin - size;\n      return Math.max(Math.min(maxOffset, toOffset), 0);\n    };\n    this.getOffsetForIndex = function (index) {\n      let align = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"auto\";\n      index = Math.max(0, Math.min(index, _this.options.count - 1));\n      const item = _this.measurementsCache[index];\n      if (!item) {\n        return void 0;\n      }\n      const size = _this.getSize();\n      const scrollOffset = _this.getScrollOffset();\n      if (align === \"auto\") {\n        if (item.end >= scrollOffset + size - _this.options.scrollPaddingEnd) {\n          align = \"end\";\n        } else if (item.start <= scrollOffset + _this.options.scrollPaddingStart) {\n          align = \"start\";\n        } else {\n          return [scrollOffset, align];\n        }\n      }\n      const toOffset = align === \"end\" ? item.end + _this.options.scrollPaddingEnd : item.start - _this.options.scrollPaddingStart;\n      return [_this.getOffsetForAlignment(toOffset, align, item.size), align];\n    };\n    this.isDynamicMode = () => this.elementsCache.size > 0;\n    this.scrollToOffset = function (toOffset) {\n      let {\n        align = \"start\",\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      _this._scrollToOffset(_this.getOffsetForAlignment(toOffset, align), {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.scrollToIndex = function (index) {\n      let {\n        align: initialAlign = \"auto\",\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      index = Math.max(0, Math.min(index, _this.options.count - 1));\n      let attempts = 0;\n      const maxAttempts = 10;\n      const tryScroll = currentAlign => {\n        if (!_this.targetWindow) return;\n        const offsetInfo = _this.getOffsetForIndex(index, currentAlign);\n        if (!offsetInfo) {\n          console.warn(\"Failed to get offset for index:\", index);\n          return;\n        }\n        const [offset, align] = offsetInfo;\n        _this._scrollToOffset(offset, {\n          adjustments: void 0,\n          behavior\n        });\n        _this.targetWindow.requestAnimationFrame(() => {\n          const currentOffset = _this.getScrollOffset();\n          const afterInfo = _this.getOffsetForIndex(index, align);\n          if (!afterInfo) {\n            console.warn(\"Failed to get offset for index:\", index);\n            return;\n          }\n          if (!approxEqual(afterInfo[0], currentOffset)) {\n            scheduleRetry(align);\n          }\n        });\n      };\n      const scheduleRetry = align => {\n        if (!_this.targetWindow) return;\n        attempts++;\n        if (attempts < maxAttempts) {\n          if (process.env.NODE_ENV !== \"production\" && _this.options.debug) {\n            console.info(\"Schedule retry\", attempts, maxAttempts);\n          }\n          _this.targetWindow.requestAnimationFrame(() => tryScroll(align));\n        } else {\n          console.warn(`Failed to scroll to index ${index} after ${maxAttempts} attempts.`);\n        }\n      };\n      tryScroll(initialAlign);\n    };\n    this.scrollBy = function (delta) {\n      let {\n        behavior\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (behavior === \"smooth\" && _this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      _this._scrollToOffset(_this.getScrollOffset() + delta, {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.getTotalSize = () => {\n      var _a;\n      const measurements = this.getMeasurements();\n      let end;\n      if (measurements.length === 0) {\n        end = this.options.paddingStart;\n      } else if (this.options.lanes === 1) {\n        end = ((_a = measurements[measurements.length - 1]) == null ? void 0 : _a.end) ?? 0;\n      } else {\n        const endByLane = Array(this.options.lanes).fill(null);\n        let endIndex = measurements.length - 1;\n        while (endIndex >= 0 && endByLane.some(val => val === null)) {\n          const item = measurements[endIndex];\n          if (endByLane[item.lane] === null) {\n            endByLane[item.lane] = item.end;\n          }\n          endIndex--;\n        }\n        end = Math.max(...endByLane.filter(val => val !== null));\n      }\n      return Math.max(end - this.options.scrollMargin + this.options.paddingEnd, 0);\n    };\n    this._scrollToOffset = (offset, _ref5) => {\n      let {\n        adjustments,\n        behavior\n      } = _ref5;\n      this.options.scrollToFn(offset, {\n        behavior,\n        adjustments\n      }, this);\n    };\n    this.measure = () => {\n      this.itemSizeCache = /* @__PURE__ */new Map();\n      this.notify(false);\n    };\n    this.setOptions(opts);\n  }\n}\nconst findNearestBinarySearch = (low, high, getCurrentValue, value) => {\n  while (low <= high) {\n    const middle = (low + high) / 2 | 0;\n    const currentValue = getCurrentValue(middle);\n    if (currentValue < value) {\n      low = middle + 1;\n    } else if (currentValue > value) {\n      high = middle - 1;\n    } else {\n      return middle;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nfunction calculateRange(_ref6) {\n  let {\n    measurements,\n    outerSize,\n    scrollOffset,\n    lanes\n  } = _ref6;\n  const lastIndex = measurements.length - 1;\n  const getOffset = index => measurements[index].start;\n  if (measurements.length <= lanes) {\n    return {\n      startIndex: 0,\n      endIndex: lastIndex\n    };\n  }\n  let startIndex = findNearestBinarySearch(0, lastIndex, getOffset, scrollOffset);\n  let endIndex = startIndex;\n  if (lanes === 1) {\n    while (endIndex < lastIndex && measurements[endIndex].end < scrollOffset + outerSize) {\n      endIndex++;\n    }\n  } else if (lanes > 1) {\n    const endPerLane = Array(lanes).fill(0);\n    while (endIndex < lastIndex && endPerLane.some(pos => pos < scrollOffset + outerSize)) {\n      const item = measurements[endIndex];\n      endPerLane[item.lane] = item.end;\n      endIndex++;\n    }\n    const startPerLane = Array(lanes).fill(scrollOffset + outerSize);\n    while (startIndex >= 0 && startPerLane.some(pos => pos >= scrollOffset)) {\n      const item = measurements[startIndex];\n      startPerLane[item.lane] = item.start;\n      startIndex--;\n    }\n    startIndex = Math.max(0, startIndex - startIndex % lanes);\n    endIndex = Math.min(lastIndex, endIndex + (lanes - 1 - endIndex % lanes));\n  }\n  return {\n    startIndex,\n    endIndex\n  };\n}\nexport { Virtualizer, approxEqual, debounce, defaultKeyExtractor, defaultRangeExtractor, elementScroll, measureElement, memo, notUndefined, observeElementOffset, observeElementRect, observeWindowOffset, observeWindowRect, windowScroll };","map":{"version":3,"names":["getRect","element","offsetWidth","offsetHeight","width","height","defaultKeyExtractor","index","defaultRangeExtractor","range","start","Math","max","startIndex","overscan","end","min","endIndex","count","arr","i","push","observeElementRect","instance","cb","scrollElement","targetWindow","handler","rect","round","ResizeObserver","observer","entries","run","entry","borderBoxSize","box","inlineSize","blockSize","options","useAnimationFrameWithResizeObserver","requestAnimationFrame","observe","unobserve","addEventListenerOptions","passive","observeWindowRect","innerWidth","innerHeight","addEventListener","removeEventListener","supportsScrollend","window","observeElementOffset","offset","fallback","useScrollendEvent","debounce","isScrollingResetDelay","createHandler","isScrolling","horizontal","isRtl","endHandler","registerScrollendEvent","observeWindowOffset","measureElement","size","windowScroll","_ref","adjustments","behavior","toOffset","_b","_a","scrollTo","call","elementScroll","_ref2","Virtualizer","constructor","opts","_this","unsubs","measurementsCache","itemSizeCache","Map","pendingMeasuredCacheIndexes","scrollRect","scrollOffset","scrollDirection","scrollAdjustments","elementsCache","_ro","get","forEach","_measureElement","target","disconnect","setOptions","opts2","Object","_ref3","key","value","debug","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","onChange","initialRect","scrollMargin","gap","indexAttribute","initialMeasurementsCache","lanes","enabled","notify","sync","maybeNotify","memo","calculateRange","process","env","NODE_ENV","initialDeps","cleanup","filter","Boolean","d","_didMount","_willUpdate","getScrollElement","ownerDocument","defaultView","cached","_scrollToOffset","getScrollOffset","getSize","getFurthestMeasurement","measurements","furthestMeasurementsFound","furthestMeasurements","m","measurement","has","lane","previousFurthestMeasurement","set","Array","from","values","sort","a","b","getMeasurementOptions","getMeasurements","_ref4","clear","length","item","slice","furthestMeasurement","measuredSize","estimateSize","outerSize","getVirtualIndexes","updateDeps","indexFromElement","node","attributeName","indexStr","getAttribute","console","warn","parseInt","prevNode","isConnected","resizeItem","itemSize","delta","shouldAdjustScrollPositionOnItemSizeChange","info","delete","getVirtualItems","indexes","virtualItems","k","len","getVirtualItemForOffset","notUndefined","findNearestBinarySearch","getOffsetForAlignment","align","arguments","undefined","maxOffset","getTotalSize","getOffsetForIndex","isDynamicMode","scrollToOffset","scrollToIndex","initialAlign","attempts","maxAttempts","tryScroll","currentAlign","offsetInfo","currentOffset","afterInfo","approxEqual","scheduleRetry","scrollBy","endByLane","fill","some","val","_ref5","scrollToFn","measure","low","high","getCurrentValue","middle","currentValue","_ref6","lastIndex","getOffset","endPerLane","pos","startPerLane"],"sources":["/Users/mattspacegrey/Documents/GitHub/SMT_DATABASE_01/node_modules/@tanstack/virtual-core/src/index.ts"],"sourcesContent":["import { approxEqual, debounce, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string | bigint\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nconst getRect = (element: HTMLElement): Rect => {\n  const { offsetWidth, offsetHeight } = element\n  return { width: offsetWidth, height: offsetHeight }\n}\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(getRect(element as unknown as HTMLElement))\n\n  if (!targetWindow.ResizeObserver) {\n    return () => {}\n  }\n\n  const observer = new targetWindow.ResizeObserver((entries) => {\n    const run = () => {\n      const entry = entries[0]\n      if (entry?.borderBoxSize) {\n        const box = entry.borderBoxSize[0]\n        if (box) {\n          handler({ width: box.inlineSize, height: box.blockSize })\n          return\n        }\n      }\n      handler(getRect(element as unknown as HTMLElement))\n    }\n\n    instance.options.useAnimationFrameWithResizeObserver\n      ? requestAnimationFrame(run)\n      : run()\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nconst addEventListenerOptions = {\n  passive: true,\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nconst supportsScrollend =\n  typeof window == 'undefined' ? true : 'onscrollend' in window\n\ntype ObserveOffsetCallBack = (offset: number, isScrolling: boolean) => void\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: ObserveOffsetCallBack,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback =\n    instance.options.useScrollendEvent && supportsScrollend\n      ? () => undefined\n      : debounce(\n          targetWindow,\n          () => {\n            cb(offset, false)\n          },\n          instance.options.isScrollingResetDelay,\n        )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    const { horizontal, isRtl } = instance.options\n    offset = horizontal\n      ? element['scrollLeft'] * ((isRtl && -1) || 1)\n      : element['scrollTop']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  const registerScrollendEvent =\n    instance.options.useScrollendEvent && supportsScrollend\n  if (registerScrollendEvent) {\n    element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n  }\n  return () => {\n    element.removeEventListener('scroll', handler)\n    if (registerScrollendEvent) {\n      element.removeEventListener('scrollend', endHandler)\n    }\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: ObserveOffsetCallBack,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback =\n    instance.options.useScrollendEvent && supportsScrollend\n      ? () => undefined\n      : debounce(\n          targetWindow,\n          () => {\n            cb(offset, false)\n          },\n          instance.options.isScrollingResetDelay,\n        )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollX' : 'scrollY']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  const registerScrollendEvent =\n    instance.options.useScrollendEvent && supportsScrollend\n  if (registerScrollendEvent) {\n    element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n  }\n  return () => {\n    element.removeEventListener('scroll', handler)\n    if (registerScrollendEvent) {\n      element.removeEventListener('scrollend', endHandler)\n    }\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n\n  return (element as unknown as HTMLElement)[\n    instance.options.horizontal ? 'offsetWidth' : 'offsetHeight'\n  ]\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: ObserveOffsetCallBack,\n  ) => void | (() => void)\n  // Optional\n  debug?: boolean\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number | (() => number)\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => Array<number>\n  scrollMargin?: number\n  gap?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: Array<VirtualItem>\n  lanes?: number\n  isScrollingResetDelay?: number\n  useScrollendEvent?: boolean\n  enabled?: boolean\n  isRtl?: boolean\n  useAnimationFrameWithResizeObserver?: boolean\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: Array<void | (() => void)> = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  targetWindow: (Window & typeof globalThis) | null = null\n  isScrolling = false\n  measurementsCache: Array<VirtualItem> = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: Array<number> = []\n  scrollRect: Rect | null = null\n  scrollOffset: number | null = null\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments = 0\n  shouldAdjustScrollPositionOnItemSizeChange:\n    | undefined\n    | ((\n        item: VirtualItem,\n        delta: number,\n        instance: Virtualizer<TScrollElement, TItemElement>,\n      ) => boolean)\n  elementsCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      }\n\n      if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n        return null\n      }\n\n      return (_ro = new this.targetWindow.ResizeObserver((entries) => {\n        entries.forEach((entry) => {\n          const run = () => {\n            this._measureElement(entry.target as TItemElement, entry)\n          }\n          this.options.useAnimationFrameWithResizeObserver\n            ? requestAnimationFrame(run)\n            : run()\n        })\n      }))\n    }\n\n    return {\n      disconnect: () => {\n        get()?.disconnect()\n        _ro = null\n      },\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      isScrollingResetDelay: 150,\n      enabled: true,\n      isRtl: false,\n      useScrollendEvent: false,\n      useAnimationFrameWithResizeObserver: false,\n      ...opts,\n    }\n  }\n\n  private notify = (sync: boolean) => {\n    this.options.onChange?.(this, sync)\n  }\n\n  private maybeNotify = memo(\n    () => {\n      this.calculateRange()\n\n      return [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ]\n    },\n    (isScrolling) => {\n      this.notify(isScrolling)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ] as [boolean, number | null, number | null],\n    },\n  )\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.observer.disconnect()\n    this.scrollElement = null\n    this.targetWindow = null\n  }\n\n  _didMount = () => {\n    return () => {\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.enabled\n      ? this.options.getScrollElement()\n      : null\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      if (!scrollElement) {\n        this.maybeNotify()\n        return\n      }\n\n      this.scrollElement = scrollElement\n\n      if (this.scrollElement && 'ownerDocument' in this.scrollElement) {\n        this.targetWindow = this.scrollElement.ownerDocument.defaultView\n      } else {\n        this.targetWindow = this.scrollElement?.window ?? null\n      }\n\n      this.elementsCache.forEach((cached) => {\n        this.observer.observe(cached)\n      })\n\n      this._scrollToOffset(this.getScrollOffset(), {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.maybeNotify()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0\n          this.scrollDirection = isScrolling\n            ? this.getScrollOffset() < offset\n              ? 'forward'\n              : 'backward'\n            : null\n          this.scrollOffset = offset\n          this.isScrolling = isScrolling\n\n          this.maybeNotify()\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    if (!this.options.enabled) {\n      this.scrollRect = null\n      return 0\n    }\n\n    this.scrollRect = this.scrollRect ?? this.options.initialRect\n\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getScrollOffset = () => {\n    if (!this.options.enabled) {\n      this.scrollOffset = null\n      return 0\n    }\n\n    this.scrollOffset =\n      this.scrollOffset ??\n      (typeof this.options.initialOffset === 'function'\n        ? this.options.initialOffset()\n        : this.options.initialOffset)\n\n    return this.scrollOffset\n  }\n\n  private getFurthestMeasurement = (\n    measurements: Array<VirtualItem>,\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurementOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n      this.options.enabled,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey, enabled) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getMeasurements = memo(\n    () => [this.getMeasurementOptions(), this.itemSizeCache],\n    (\n      { count, paddingStart, scrollMargin, getItemKey, enabled },\n      itemSizeCache,\n    ) => {\n      if (!enabled) {\n        this.measurementsCache = []\n        this.itemSizeCache.clear()\n        return []\n      }\n\n      if (this.measurementsCache.length === 0) {\n        this.measurementsCache = this.options.initialMeasurementsCache\n        this.measurementsCache.forEach((item) => {\n          this.itemSizeCache.set(item.key, item.size)\n        })\n      }\n\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [\n      this.getMeasurements(),\n      this.getSize(),\n      this.getScrollOffset(),\n      this.options.lanes,\n    ],\n    (measurements, outerSize, scrollOffset, lanes) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n              lanes,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualIndexes = memo(\n    () => {\n      let startIndex: number | null = null\n      let endIndex: number | null = null\n      const range = this.calculateRange()\n      if (range) {\n        startIndex = range.startIndex\n        endIndex = range.endIndex\n      }\n      this.maybeNotify.updateDeps([this.isScrolling, startIndex, endIndex])\n      return [\n        this.options.rangeExtractor,\n        this.options.overscan,\n        this.options.count,\n        startIndex,\n        endIndex,\n      ]\n    },\n    (rangeExtractor, overscan, count, startIndex, endIndex) => {\n      return startIndex === null || endIndex === null\n        ? []\n        : rangeExtractor({\n            startIndex,\n            endIndex,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getVirtualIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const index = this.indexFromElement(node)\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n    const key = item.key\n    const prevNode = this.elementsCache.get(key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.elementsCache.set(key, node)\n    }\n\n    if (node.isConnected) {\n      this.resizeItem(index, this.options.measureElement(node, entry, this))\n    }\n  }\n\n  resizeItem = (index: number, size: number) => {\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (\n        this.shouldAdjustScrollPositionOnItemSizeChange !== undefined\n          ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this)\n          : item.start < this.getScrollOffset() + this.scrollAdjustments\n      ) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.getScrollOffset(), {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null | undefined) => {\n    if (!node) {\n      this.elementsCache.forEach((cached, key) => {\n        if (!cached.isConnected) {\n          this.observer.unobserve(cached)\n          this.elementsCache.delete(key)\n        }\n      })\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getVirtualIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: Array<VirtualItem> = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getVirtualItems',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n    if (measurements.length === 0) {\n      return undefined\n    }\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (\n    toOffset: number,\n    align: ScrollAlignment,\n    itemSize = 0,\n  ) => {\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      align = toOffset >= scrollOffset + size ? 'end' : 'start'\n    }\n\n    if (align === 'center') {\n      // When aligning to a particular item (e.g. with scrollToIndex),\n      // adjust offset by the size of the item to center on the item\n      toOffset += (itemSize - size) / 2\n    } else if (align === 'end') {\n      toOffset -= size\n    }\n\n    const maxOffset = this.getTotalSize() + this.options.scrollMargin - size\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return undefined\n    }\n\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      if (item.end >= scrollOffset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (item.start <= scrollOffset + this.options.scrollPaddingStart) {\n        align = 'start'\n      } else {\n        return [scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? item.end + this.options.scrollPaddingEnd\n        : item.start - this.options.scrollPaddingStart\n\n    return [\n      this.getOffsetForAlignment(toOffset, align, item.size),\n      align,\n    ] as const\n  }\n\n  private isDynamicMode = () => this.elementsCache.size > 0\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    let attempts = 0\n    const maxAttempts = 10\n\n    const tryScroll = (currentAlign: ScrollAlignment) => {\n      if (!this.targetWindow) return\n\n      const offsetInfo = this.getOffsetForIndex(index, currentAlign)\n      if (!offsetInfo) {\n        console.warn('Failed to get offset for index:', index)\n        return\n      }\n      const [offset, align] = offsetInfo\n      this._scrollToOffset(offset, { adjustments: undefined, behavior })\n\n      this.targetWindow.requestAnimationFrame(() => {\n        const currentOffset = this.getScrollOffset()\n        const afterInfo = this.getOffsetForIndex(index, align)\n        if (!afterInfo) {\n          console.warn('Failed to get offset for index:', index)\n          return\n        }\n\n        if (!approxEqual(afterInfo[0], currentOffset)) {\n          scheduleRetry(align)\n        }\n      })\n    }\n\n    const scheduleRetry = (align: ScrollAlignment) => {\n      if (!this.targetWindow) return\n\n      attempts++\n      if (attempts < maxAttempts) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('Schedule retry', attempts, maxAttempts)\n        }\n        this.targetWindow.requestAnimationFrame(() => tryScroll(align))\n      } else {\n        console.warn(\n          `Failed to scroll to index ${index} after ${maxAttempts} attempts.`,\n        )\n      }\n    }\n\n    tryScroll(initialAlign)\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getScrollOffset() + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    // If there is only one lane, use the last measurement's end\n    // Otherwise find the maximum end value among all measurements\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else if (this.options.lanes === 1) {\n      end = measurements[measurements.length - 1]?.end ?? 0\n    } else {\n      const endByLane = Array<number | null>(this.options.lanes).fill(null)\n      let endIndex = measurements.length - 1\n      while (endIndex >= 0 && endByLane.some((val) => val === null)) {\n        const item = measurements[endIndex]!\n        if (endByLane[item.lane] === null) {\n          endByLane[item.lane] = item.end\n        }\n\n        endIndex--\n      }\n\n      end = Math.max(...endByLane.filter((val): val is number => val !== null))\n    }\n\n    return Math.max(\n      end - this.options.scrollMargin + this.options.paddingEnd,\n      0,\n    )\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify(false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n  lanes,\n}: {\n  measurements: Array<VirtualItem>\n  outerSize: number\n  scrollOffset: number\n  lanes: number\n}) {\n  const lastIndex = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  // handle case when item count is less than or equal to lanes\n  if (measurements.length <= lanes) {\n    return {\n      startIndex: 0,\n      endIndex: lastIndex,\n    }\n  }\n\n  let startIndex = findNearestBinarySearch(\n    0,\n    lastIndex,\n    getOffset,\n    scrollOffset,\n  )\n  let endIndex = startIndex\n\n  if (lanes === 1) {\n    while (\n      endIndex < lastIndex &&\n      measurements[endIndex]!.end < scrollOffset + outerSize\n    ) {\n      endIndex++\n    }\n  } else if (lanes > 1) {\n    // Expand forward until we include the visible items from all lanes\n    // which are closer to the end of the virtualizer window\n    const endPerLane = Array(lanes).fill(0)\n    while (\n      endIndex < lastIndex &&\n      endPerLane.some((pos) => pos < scrollOffset + outerSize)\n    ) {\n      const item = measurements[endIndex]!\n      endPerLane[item.lane] = item.end\n      endIndex++\n    }\n\n    // Expand backward until we include all lanes' visible items\n    // closer to the top\n    const startPerLane = Array(lanes).fill(scrollOffset + outerSize)\n    while (startIndex >= 0 && startPerLane.some((pos) => pos >= scrollOffset)) {\n      const item = measurements[startIndex]!\n      startPerLane[item.lane] = item.start\n      startIndex--\n    }\n\n    // Align startIndex to the beginning of its lane\n    startIndex = Math.max(0, startIndex - (startIndex % lanes))\n    // Align endIndex to the end of its lane\n    endIndex = Math.min(lastIndex, endIndex + (lanes - 1 - (endIndex % lanes)))\n  }\n\n  return { startIndex, endIndex }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}